<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>计算机网络笔记（二）</title>
    <link href="/2023/16606.html"/>
    <url>/2023/16606.html</url>
    
    <content type="html"><![CDATA[<h1 id="已建立的连接再次发送SYN会发生什么？"><a href="#已建立的连接再次发送SYN会发生什么？" class="headerlink" title="已建立的连接再次发送SYN会发生什么？"></a>已建立的连接再次发送SYN会发生什么？</h1><p>考虑下面的情况：</p><p>客户端与服务器已经建立了连接，但是客户端宕机了，上线后又发送了SYN报文，此时会发生什么？</p><p>分析：</p><p>客户端宕机，服务器并不知道，因此服务器仍然是<code>Established</code>状态</p><ul><li>如果此时服务器有数据要发送，客户端内核发送RST，结束连接。 </li><li>如果一直没有数据要发送，超过时间后TCP保活机制会发送探测报文，检测到没有存活就释放结束连接。</li><li>如果客户端上线后发送了SYN，此时的seq是乱序的（随机值），<strong>服务器会回复一个携带了正确序列号和确认号的 ACK 报文，这个 ACK 被称之为 Challenge ACK</strong>），而客户端发现服务器回复的ACK不是自己期望收到的，回复RST报文，结束连接。</li></ul><p>另外要注意是，如果服务器收到的RST的确认号不是自己期望的，会丢弃报文，因此<strong>客户端在回复RST时，也需要携带正确的序列号</strong>。<a href="https://blog.csdn.net/flynetcn/article/details/120790434">参考：收到RST一定断开连接吗？</a><a href="https://mp.weixin.qq.com/s/8AGdziLX7Pl7x7iwpPd_yg">原文</a></p><blockquote><p>利用该特性关闭TCP连接</p></blockquote><p>killcx工具可以给客户端和服务器双方发送RST报文中止连接。其原理是主动发送SYN包，从服务器获取正确seq和ack号，然后伪造两个RST报文：</p><ul><li>用确认号伪造RST发送给服务端</li><li>用序列号伪造RST发给客户端</li></ul><p><strong>RST报文中携带的序列号代表对方期望收到的。</strong></p><p>killcx属于主动工具，可以关闭活跃连接也可以关闭非活跃连接。</p><h1 id="四次挥手收到乱序FIN包如何处理"><a href="#四次挥手收到乱序FIN包如何处理" class="headerlink" title="四次挥手收到乱序FIN包如何处理"></a>四次挥手收到乱序FIN包如何处理</h1><p>考虑以下情况：</p><p>主动方调用shutdown关闭了写方向，第二次挥手后主动方处于<code>FIN_WAIT_2</code>状态，这中间被动方发送了一些数据，但是由于延迟未能按时到达，被动方发完数据后发送了FIN报文，进入了<code>LAST_ACK</code>状态，FIN报文先到达了主动方，此时会发生什么？</p><p>如果shutdown关闭了读方向，那么收到对方的数据包时，回复RST报文。</p><p>只关闭了写方向，说明可以收到数据，且<strong>期望收到有序数据</strong>。</p><p>因此这时候提前到达的FIN是乱序的，并不会导致主动方进入<code>TIME_WAIT</code>状态。</p><p>实际上，主动方在<code>FIN_WAIT_2</code>状态下收到了乱序数据包，会放入乱序队列中（红黑树实现的），在接下来收到期望的数据后：</p><ul><li><p>检查是否有FIN标志，有的话进入下一状态</p></li><li><p>没有的话，检测乱序列表，有无符合的数据包（有序）</p></li><li><p>如果有符合的（有序的），同样检测是否具有FIN标志，有FIN标志则发送ACK确认，同时进入<code>TIME_WAIT</code>状态</p></li></ul><h1 id="在TIME-WAIT状态下收到SYN和RST会发生什么？"><a href="#在TIME-WAIT状态下收到SYN和RST会发生什么？" class="headerlink" title="在TIME_WAIT状态下收到SYN和RST会发生什么？"></a>在<code>TIME_WAIT</code>状态下收到SYN和RST会发生什么？</h1><blockquote><p>收到SYN的情况</p></blockquote><p>首先，假设客户端为主动方，主动方才有<code>TIME_WAIT</code>状态，此时客户端收到了服务端发来的SYN报文：</p><ul><li>开启TCP时间戳功能的情况：<ul><li>如果SYN的序列号比客户端期望收到的序列号大，时间戳大于客户端最近时间戳，为合法报文；</li><li>任何一个不符合的，为非法报文。</li></ul></li><li>未开启TCP时间戳功能的情况：<ul><li>如果SYN的序列号比客户端期望收到的序列号大，为合法报文；</li><li>否则，为非法报文。</li></ul></li></ul><p>如果收到了<strong>合法</strong>的SYN报文，则重用连接，跳过<code>TIME_WAIT</code>状态，变为<code>SYN_RECV</code>状态。</p><p>如果收到了<strong>非法</strong>的SYN报文，回复给服务器一个<strong>跟上次一样的确认号</strong>，服务器收到后发现不是自己期望的报文，<strong>回复给客户端一个RST报文</strong>，客户端收到后断开连接。</p><blockquote><p>收到RST的情况</p></blockquote><p>在<code>TIME_WAIT</code>状态下，收到RST报文的策略和内核参数有关系：<code>net.ipv4.tcp_rfc1337</code>，默认为0。</p><ul><li>如果为0：提前结束<code>TIME_WAIT</code>状态，释放连接。</li><li>如果为1：丢弃RST报文，重新延长<code>TIME_WAIT</code>时间。</li></ul><h1 id="客户端断电和进程崩溃的区别"><a href="#客户端断电和进程崩溃的区别" class="headerlink" title="客户端断电和进程崩溃的区别"></a>客户端断电和进程崩溃的区别</h1><blockquote><p>进程崩溃</p></blockquote><p>进程崩溃后操作系统要回收所有资源，内核会发送第一个FIN报文，后续挥手也内核中完成，不需要进程的参与。</p><blockquote><p>客户端断电、宕机</p></blockquote><p>此时服务器并不知情，看是否有数据发送：</p><ul><li>有数据发送：客户端内核发现没有该连接，回复RST报文。</li><li>无数据发送：考虑是否开启TCP保活机制<ul><li>未开启：服务端一直保持连接，需要等待服务重启后才能发现。</li><li>开启：一段时间后发送探测报文，超过次数后仍无回复，断开连接。</li></ul></li></ul><blockquote><p>客户端断电、宕机后又重启了</p></blockquote><p>无论是什么原因，客户端重启后协议栈中就没有原来的连接信息了</p><ul><li>如果有没有进程绑定目标端口：<strong>回复RST报文</strong>。</li><li>如果有进程绑定目标端口：已经不是原始连接信息了，客户端内核里协议栈会发现找不到该TCP连接的 socket结构体，于是就会<strong>回复RST报文，重置该TCP连接</strong>。</li></ul><p>总之，客户端重启后，如果收到了之前的TCP连接报文，都会回复RST，重置连接。</p><h1 id="tcp-tw-reuse为什么是默认关闭的？"><a href="#tcp-tw-reuse为什么是默认关闭的？" class="headerlink" title="tcp_tw_reuse为什么是默认关闭的？"></a>tcp_tw_reuse为什么是默认关闭的？</h1><p><strong>这个问题的本质是，如果<code>TIME_WAIT状态</code>过短会出现什么问题？</strong></p><p><code>tcp_tw_reuse</code>参数可以复用处于<code>TIME_WAIT</code>状态的TCP连接，不过也存在一些限制：</p><ul><li>只能在主动发起方使用，因为该参数作用在connect函数中</li><li><code>TIME_WAIT</code>状态的创建时间要超过1秒</li><li>双方需要打开TCP时间戳功能，在报头的选项中</li></ul><p>TCP时间戳功能是默认开启的，那<code>tcp_tw_reuse</code>为什么是默认关闭的呢？</p><blockquote><p>原因之一</p></blockquote><p>复用<code>TIME_WAIT</code>状态的连接实际上意味着缩短了<code>TIME_WAIT</code>状态的时间，<code>TIME_WAIT</code>持续时间的意义在于：</p><ul><li>防止历史数据被相同的连接错误的接收</li><li>保证被动方能正确的关闭连接</li></ul><p>在开启了TCP时间戳功能后，其防回绕机制（PASW）可以有效防止回绕数据的接收，看起来可以避免第一个不足了，<strong>但是对于RST报文来说，时间戳即使过期了，只要RST报文的序列号在对方的接收窗口内，也是能被接受的。</strong></p><p>也就是说，虽然历史的数据报文不会被接收，<strong>但是历史RST有可能被接收，导致连接中断</strong>。</p><p>在RFC 1323 中有这么一段建议</p><p><em>建议 RST 段不携带时间戳，并且无论其时间戳如何，RST 段都是可接受的。老的重复的 RST 段应该是极不可能的，并且它们的清除功能应优先于时间戳。</em></p><blockquote><p>原因之二</p></blockquote><p>如果第四次挥手的FIN报文延迟了，此时开始建立第二次连接：</p><ul><li>服务端处于<code>LAST_ACK</code>状态</li><li>客户端由于快速结束了<code>TIME_WAIT</code>状态，发送了SYN准备第二次连接，处于<code>SYN_SENT</code>状态</li></ul><p>客户端刚发SYN，延迟的FIN到达了，客户端发现不是自己期望收到的数据，回复RST，连接断开。</p><p><img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/tcp_tw_reuse%E7%AC%AC%E4%BA%8C%E4%B8%AA%E9%97%AE%E9%A2%98.drawio.png"></p><p>图上的SYN比FIN慢，如果客户但发送的SYN快于FIN，在<code>LAST_ACK</code>状态收到SYN报文后（SYN报文较为特殊，收到后会返回<strong>携带了正确序列号和确认号的 ACK 报文</strong>，叫做<a href="https://xiaolincoding.com/network/3_tcp/challenge_ack.html">Challenge ACK</a>），给客户端回复ACK后，客户端发现不是自己想要的确认号，回复RST。</p><h1 id="端口号相关问题"><a href="#端口号相关问题" class="headerlink" title="端口号相关问题"></a>端口号相关问题</h1><blockquote><p>TCP和UDP可以同时绑定相同端口吗？</p></blockquote><p>可以。</p><p>在传输层，通过端口号判断不同的应用程序，TCP协议和UDP协议在内核中是独立的两个模块，因此即使绑定了相同的端口号，也能正常通信。</p><blockquote><p>多个TCP服务进程可以绑定同一个端口号吗？</p></blockquote><p>如果IP地址不同，可以绑定同一个端口，否则会出现<code>Address already in use</code>错误。</p><p>需要注意的是，0.0.0.0代表任意的地址，如果绑定了该地址，绑定其他地址的相同端口号就会出错。</p><p>但是可以对socket设置，<code>SO_REUSEPORT</code>属性，实现多个进程绑定相同的IP地址和端口（内核3.9特性）。</p><blockquote><p>重启TCP服务进程时，为什么会有Address in use报错信息？</p></blockquote><p>因为重启进程时，发生了四次挥手，服务端进入了<code>TIME_WAIT状态</code>，此时绑定的IP+端口仍然是有效的，下一次发起同样的监听就会报错。</p><p>这个问题可以对socket设置<code>SO_REUSEADDR</code>属性进行解决，<strong>如果当前启动进程绑定的 IP+PORT 与处于TIME_WAIT 状态的连接占用的 IP+PORT 存在冲突，但是新启动的进程使用了 SO_REUSEADDR 选项，那么该进程就可以绑定成功</strong>。</p><p><strong>还有另外一个作用</strong>，当绑定的IP地址不是完全相同的时候，允许绑定。比如0.0.0.0虽然包含了192.168.1.100，但是不完全相同，执行bind()不会报错。</p><blockquote><p>总结</p></blockquote><p>TCP绑定的时候根据四元组来确定，一般情况下，源IP+源端口和目标IP+目标端口不相同即可绑定成功。</p><h1 id="没有listen函数可以建立TCP连接吗？"><a href="#没有listen函数可以建立TCP连接吗？" class="headerlink" title="没有listen函数可以建立TCP连接吗？"></a>没有listen函数可以建立TCP连接吗？</h1><p>可以，没有服务器参与，客户端形成自连接。TCP socket可以connect它本身bind的地址和端口。</p><p>listen一般由服务端调用，此时内核自动创建半连接队列和全连接队列，用以存放socket。</p><p>在TCP自连接的情况下，没有listen函数，也就没有连接队列，但内核中还由全局hash表，也可以用于存放连接信息。客户端在调用connect方法时，将连接信息存入hash表，发出的消息经过回环地址重新回到TCP传输层，再次从hash表中取出信息，建立连接。</p><h1 id="四次挥手如何变三次挥手？"><a href="#四次挥手如何变三次挥手？" class="headerlink" title="四次挥手如何变三次挥手？"></a>四次挥手如何变三次挥手？</h1><p>假设客户端发起第一次挥手，第二次挥手时，服务端给客户端发送ACK确认，进入<code>CLOSE_WAIT状态</code>，等待处理完数据或者发送完数据后，第三次挥手，发送FIN报文到客户端。</p><p>可以看出，之所以二三次挥手要分开，就是因为这中间可能有数据需要继续处理。</p><p>服务器的FIN报文是怎么做到数据处理完后才发送的呢：</p><ul><li><p>在收到 FIN 报文的时候，TCP 协议栈会为 FIN 包插入一个文件结束符 EOF 到接收缓冲区中，服务端应用程序可以通过 read 调用来感知这个 FIN 包，这个 EOF 会被<strong>放在已排队等候的其他已接收的数据之后</strong>，所以必须要得继续 read 接收缓冲区已接收的数据；</p></li><li><p>接着，当服务端在 read 数据的时候，最后自然就会读到 EOF，接着 <strong>read() 就会返回 0，这时服务端应用程序如果有数据要发送的话，就发完数据后才调用关闭连接的函数，如果服务端应用程序没有数据要发送的话，可以直接调用关闭连接的函数</strong>，这时服务端就会发一个 FIN 包，这个  FIN 报文代表服务端不会再发送数据了，之后处于 LAST_ACK 状态；</p></li></ul><p><strong>如果开启了TCP延迟确认机制（默认开启），且没有数据要发送，那么服务器将要发送的FIN会和第二次挥手的ACK一起发送（第二次挥手的ACK在等待是否有数据要发送），这样就变成了三次挥手。</strong></p><h1 id="服务端在SYN-REVD状态收到数据发生什么？"><a href="#服务端在SYN-REVD状态收到数据发生什么？" class="headerlink" title="服务端在SYN_REVD状态收到数据发生什么？"></a>服务端在SYN_REVD状态收到数据发生什么？</h1><p>第三次握手发送后，客户端就进入Establised状态了，此时可以发送数据。但是如果发送的ACK因为延迟没有到达服务器，此时的服务器还是SYN_REVD状态，服务器将如何处理提前到达的数据？</p><p><img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/942c2a1e67224c8c8bd41b13d7c89a96.png"></p><p>其实，建立连接后，客户端第一次的数据包，<strong>其确认号和序列号与第三次握手的ACK报文一致</strong>。因此，即使第一次发送的数据先于第三次握手，也能正常建立连接，接收数据。</p><p>为什么这个数据包的序列号和确认号和第三次握手一致呢？</p><ul><li>序列号表示自己发送了多少数据&#x3D;上一次发送的序列号+上一次的len（特殊情况，上一次是SYN或FIN改为+1）</li><li>确认号表示自己接收了多少数据，同时也代表下一次期望收到的数据。确认号&#x3D;上一次收到的的报文<strong>序列号+len</strong>。（特殊情况，如果上一次收到的SYN或FIN，改为+1）</li></ul><p>因此，握手后第一次发送的数据包中的序列号&#x3D;上次的序列号+len，上次发送的不是SYN也不是FIN，且len&#x3D;0，所以<strong>第一次发送的数据包中的序列号&#x3D;上次的序列号</strong>。</p><p>确认号同理。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络笔记（一）</title>
    <link href="/2023/53412.html"/>
    <url>/2023/53412.html</url>
    
    <content type="html"><![CDATA[<h1 id="TCP半连接队列和全连接队列"><a href="#TCP半连接队列和全连接队列" class="headerlink" title="TCP半连接队列和全连接队列"></a>TCP半连接队列和全连接队列</h1><ul><li>半连接队列：SYN队列</li><li>全连接队列：accept队列</li></ul><p>假设客户端先发起连接，第一次握手后，服务端的<strong>内核</strong>会将该连接存入半连接队列，在第三次连接完成后<strong>内核会把连接从半连接队列移除，然后创建新的完全的连接，并将其添加到 accept 队列，等待进程调用 accept 函数时把连接取出来</strong>。</p><blockquote><p>全连接队列</p></blockquote><ul><li><code>tcp_abort_on_overflow</code>参数可以控制全连接队列满后，服务端对于新连接的回应策略：<ul><li>0：丢弃，定时重传第二次握手的SYN+ACK，超过重传次数后从半连接队列删除连接。</li><li>1：发送一个 <code>reset</code> 包给 client，表示废掉这个握手过程和这个连接。当服务器端口没有监听的时候，客户端发送SYN也会收到RST报文，因此所以客户端这时候收到RST，其实无法区分到底是<strong>端口未监听</strong>，还是<strong>全连接队列满了</strong>。</li></ul></li><li>通常情况下，应当把<code>tcp_abort_on_overflow</code>设置为0，因为这样更有利于应对突发流量。举个例子，当TCP 全连接队列满导致服务器丢掉了ACK，与此同时，客户端的连接状态却是 ESTABLISHED，进程就在建立好的连接上发送请求。只要服务器没有为请求回复 ACK，请求就会被多次<strong>重发</strong>。如果服务器上的进程只是<strong>短暂的繁忙造成 accept 队列满，那么当 TCP 全连接队列有空位时，再次接收到的请求报文由于含有ACK，仍然会触发服务器端成功建立连接。</strong>如果废弃了就得重新连接。</li></ul><blockquote><p>半连接队列</p></blockquote><ul><li>半连接队列满时，服务端会有大量的处于<code>SYN_RECV</code>状态的TCP连接，也就是所谓的 SYN 洪泛、SYN 攻击、DDos 攻击。</li><li><strong>开启<code>syncookies</code>功能就可以在不使用SYN半连接队列的情况下成功建立连接</strong>，服务器根据当前状态计算出一个值（生成cookies），放在己方发出的 SYN+ACK 报文中发出，当客户端返回 ACK 报文时，取出该值验证，如果合法，就认为连接建立成功。<ul><li>0 值，表示关闭该功能；</li><li>1 值，表示仅当 SYN 半连接队列放不下时，再启用它；</li><li>2 值，表示无条件开启功能；</li></ul></li><li>想要调大半连接队列的大小，<strong>不能只单纯增大<code>tcp_max_syn_backlog</code>的值，还需一同增大<code>somaxconn</code>和<code>backlog</code>，也就是增大 accept队列</strong>。</li></ul><blockquote><p>绕过半连接队列进行握手</p></blockquote><p>上文提到在半连接队列满时，可以通过开启<code>tcp_syncookies</code>参数来绕过半连接队列。</p><p>实际上，服务器在收到第一次握手请求时，生成的<code>cookies</code>并不会有一个专门的队列保存，它是通过<strong>通信双方的IP地址端口、时间戳、MSS</strong>等信息进行<strong>实时计算</strong>的，保存在<strong>TCP报头</strong>的<code>seq</code>里，跟着第二次握手发回客户端。当服务端收到客户端发来的第三次握手包时，会通过seq还原出<strong>通信双方的IP地址端口、时间戳、MSS</strong>，验证通过则建立连接。</p><p>但cookies方案有利有弊，虽然防范了SYN攻击，但是<strong>服务端并不会保存连接信息</strong>，如果丢失了，也不会重传第二次握手信息。</p><p>其次，编解码cookies非常<strong>耗费cpu资源</strong>，通过构造大量的<strong>第三次握手包（ACK包）</strong>，同时带上各种瞎编的<code>cookies</code>信息，服务端收到<code>ACK包</code>后<strong>以为是正确cookies</strong>，解码后发现不是正确数据包后才丢弃。</p><p>这种通过构造大量<code>ACK包</code>去消耗服务端资源的攻击，叫<strong>ACK攻击</strong>，受到攻击的服务器可能会因为<strong>CPU资源耗尽</strong>导致没能响应正常请求。</p><h1 id="TCP的优化"><a href="#TCP的优化" class="headerlink" title="TCP的优化"></a>TCP的优化</h1><h2 id="三次握手优化"><a href="#三次握手优化" class="headerlink" title="三次握手优化"></a>三次握手优化</h2><blockquote><p>客户端优化</p></blockquote><p>客户端发送SYN后处于<code>SYN_SNET</code>状态，收不到服务端的ACK时，进行重发，重发次数由<code>tcp_syn_retries</code>控制，可以适当减小，便于快速暴露问题。</p><blockquote><p>服务端优化</p></blockquote><p>服务端收到客户端的SYN后，回复一个SYN+ACK，状态变为SYN_RECV,同时客户端的状态变为ESTABLISHED，<code>tcp_synack_retries</code>可以控制服务端第二次握手的重发次数。</p><blockquote><p>TCP Fast Open 绕过“三次”握手</p></blockquote><p>在 Linux 3.7 内核版本之后，提供了 TCP Fast Open 功能，这个功能可以减少 TCP 连接建立的时延，具体过程为：</p><ol><li>客户端发送SYN，报文中包含Fast Open选项，且Cookie选项为空，表明客户端请求<code>Fast Open Cookies</code>；</li><li>支持Fast Open的服务器将生成Cookie，并置于选项中发回客户端；</li><li>客户端进行缓存。</li></ol><p>在下一次建立连接时</p><ol><li>客户端发送SYN，并包含数据和记录的Cookie；</li><li>支持Fast Open的服务器会对Cookie进行校验，如果合法则在SYN+ACK回复中对SYN和数据进行确认；不合法则丢弃数据，在回复的SYN+ACK中只对客户端的SYN进行确认；（如果服务器接收了数据，代表服务器在三次握手之前就能发送数据给客户端，节省了一个RTT的时间消耗，因为握手完成需要1.5个RTT）</li><li>客户端回复ACK对服务器的SYN和数据进行确认，但是如果客户端在最初发送的数据没有被确认，将会重发数据部分；</li><li>后续数据请求和普通情况一致。</li></ol><p>因此TCP Fast Open可以节约三次握手的时间消耗。</p><h2 id="四次挥手优化"><a href="#四次挥手优化" class="headerlink" title="四次挥手优化"></a>四次挥手优化</h2><p>四次挥手过程（客户端为主动发起方）：</p><ol><li>客户端发送FIN报文，变为<code>FIN_WAIT_1</code>状态（第一次挥手）；</li><li>服务器收到来自客户端的FIN报文，发送ACK确认，状态变为<code>CLOSE_WAIT</code>（第二次挥手）；</li><li>客户端收到服务端的ACK后，变为<code>FIN_WAIT_2</code>状态，表明发送通道关闭；</li><li>服务端在处理完剩余数据后，发送FIN报文给客户端，状态变为<code>LAST_ACK</code>（第三次挥手）；</li><li>客户端收到服务端的FIN报文后，回复一个ACK，变为<code>TIME_WAIT</code>状态（第四次挥手）；</li><li>服务端收到ACK，关闭连接；</li><li><code>TIME_WAIT</code>状态下的连接在一段时间后彻底关闭。</li></ol><blockquote><p>FIN_WAIT1 状态的优化</p></blockquote><p>主动方没有收到ACK的确认，会重发FIN报文，控制参数为<code>tcp_orphan_retries</code>，默认值0（特指8次）。可以考虑降低这个值，超过重传次数关闭连接。</p><p>但在特殊情况下，FIN报文可能无法正常发送，导致一直处于<code>FIN_WAIT_1</code>状态，这是由于TCP的特性导致：</p><ul><li>数据有序发送，缓冲区有数据时FIN无法提前发送；</li><li>接收窗口为0时，无法发送数据，比如恶意下载大文件。</li></ul><p>这种情况下，可以通过<code>tcp_max_orphans</code>参数控制孤儿连接的最大数量，当继续新增孤儿连接时，不再走四次挥手，直接发送RST报文。</p><blockquote><p>FIN_WAIT_2 状态的优化</p></blockquote><p>在<code>FIN_WAIT_2</code>状态下，主动方如果是用shutdown关闭连接的，可以一直保持状态，但是对于close函数关闭的连接，不能再发送或者接收数据，因此该状态不能持续太久，由参数<code>tcp_fin_timeout</code>控制，默认60s。</p><blockquote><p>TIME_WAIT 状态的优化</p></blockquote><p>当主动方收到被动方的FIN报文时，立即回复ACK，同时进入<code>TIME_WAIT</code>状态，在等待期间，如果被动方没有收到自己的ACK，<strong>被动方</strong>会重发FIN报文（重发次数由<code>tcp_orphan_retries</code>控制），主动方收到后再次回复ACK，等待时间重置。</p><p><code>TIME_WAIT</code>状态的首要作用是<strong>防止历史连接的数据，被相同的四元组错误接收</strong>。</p><p>考虑这样一种情况：</p><ol><li>在某次正常的连接中，服务器发送给客户端的数据在网络中延迟了；</li><li>服务器进行了重发，客户端正常接收，两者断开了连接；</li><li>由于没有<code>TIME_WAIT</code>状态，或者该状态非常短，下一次连接正常建立了；</li><li>在第二次通讯过程中，1.中延迟的包到达了，由于四元组相同，且在客户端窗口内，被错误的接收。</li></ol><p>因此<code>TIME_WAIT</code>状态的时间设置为2MSL时间（MSL是报文最大生存时间，超过这个时间的报文会被丢弃，原理是报文每经过一次路由器的转发，IP 头部的 TTL 字段就会减 1，减到 0 时报文就被丢弃，这就限制了报文的最长存活时间），2MSL刚好是一个来回，足以保证上个连接中所有的报文在网络中自然消失。</p><p><code>TIME_WAIT</code>状态的另一个重要作用是<strong>等待足够的时间以确保最后的 ACK 能让被动关闭方接收，从而帮助其正常关闭</strong>。</p><p>如果主动方最后一次发送的ACK没有到达被动方，那么被动方会以为自己的FIN报文没有到达，因此他重新发送FIN报文，如果此时主动方处于关闭状态（TIME_WAIT太短），主动方就回复RTS报文，被动方异常中止。</p><p>为了防止这种情况出现，客户端必须等待足够长的时间，确保服务端能够收到 ACK，如果服务端没有收到 ACK，那么就会触发 TCP 重传机制，服务端会重新发送一个 FIN，这样一去一来刚好2MSL的时间。</p><p>为什么是 2 MSL 的时长呢？这其实是相当于<strong>至少允许报文丢失一次</strong>。比如，若 ACK 在一个 MSL 内丢失，这样被动方重发的 FIN 会在第 2 个 MSL 内到达，TIME_WAIT 状态的连接可以应对。</p><p>优化方式一：<code>tcp_max_tw_buckets</code>限制了<code>TIME_WAIT</code>状态下的最大连接数，可以适当增大。</p><p>优化方式二：<code>tcp_tw_reuse</code>参数的开启可以复用处于<code>TIME_WAIT</code>状态的连接，但是存在限制：</p><ul><li>只能在主动发起方使用，因为该参数作用在connect函数中</li><li><code>TIME_WAIT</code>状态的创建时间要超过1秒</li><li>双方需要打开TCP时间戳功能，在报头的选项中</li></ul><p>优化方式三：在程序中设置 socket 选项，来设置调用 close 关闭连接行为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">linger</span> <span class="hljs-title">so_linger</span>;</span><br>so_linger.l_onoff = <span class="hljs-number">1</span>;<br>so_linger.l_linger = <span class="hljs-number">0</span>;<br>setsockopt(s, SOL_SOCKET, SO_LINGER, &amp;so_linger, <span class="hljs-keyword">sizeof</span>(so_linger));<br></code></pre></td></tr></table></figure><p>如果 <code>l_onoff</code> 为非 0， 且 <code>l_linger</code> 值为 0，<strong>那么调用 close 后，会立该发送一个 RST 标志给对端，该 TCP 连接将跳过四次挥手，也就跳过了 TIME_WAIT 状态，直接关闭。</strong>因此不建议在服务端使用，客户端会看到TCP连接错误。</p><blockquote><p>如果连接双方同时关闭连接，出现什么情况</p></blockquote><p>双方同时关闭连接，都处于<code>FIN_WAIT_1</code>状态，但是在这个情况中，双方并没有等到ACK，而是都收到了对方的FIN报文，此时双方会进入一种新的状态：<code>CLOSEING</code>，代替了<code>FIN_WAIT_2</code>状态，同时内核回复ACK，双方都进入<code>TIME_WAIT</code>状态，等待一段时间后连接断开。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于泛型和通配符的理解</title>
    <link href="/2023/1540.html"/>
    <url>/2023/1540.html</url>
    
    <content type="html"><![CDATA[<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>JDK1.5引入了泛型机制，泛型的使用主要有泛型接口、泛型类、泛型方法。</p><p>在之前，如果声明了<code>List list=new ArrayList()</code>，可以向其中添加任意类型的对象，那么在取出的时候就不知道具体是哪种类型，强制转换可能会遇到问题。引入泛型后，在编译阶段就会检查类型是否合法<code>List&lt;String&gt; arrayList = new ArrayList&lt;String&gt;()</code>，泛型只在编译阶段有效，编译之后会进行<strong>泛型擦除</strong>。</p><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><p>泛型接口的常见应用，比如JPA基本的curd接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 源码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">JpaRepository</span>&lt;T, ID&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PagingAndSortingRepository</span>&lt;T, ID&gt;, QueryByExampleExecutor&lt;T&gt; &#123;<br><br>   <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * (non-Javadoc)</span><br><span class="hljs-comment">    * @see org.springframework.data.repository.CrudRepository#findAll()</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Override</span><br>   List&lt;T&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// Dao层接口，可以多继承</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ChunkDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;Chunk,Long&gt;, JpaSpecificationExecutor&lt;Chunk&gt; &#123;&#125;<br></code></pre></td></tr></table></figure><p>自定义泛型接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ljp.t;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">(T something)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>实现泛型接口时</strong>，可以指定类型或者不指定类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现泛型类并指定类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Animal</span>&lt;String&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">(String something)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;eat:&quot;</span> + something);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现泛型接口但不指定类型，此时需要在类后面加泛型，这也是一个泛型类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Animal</span>&lt;T&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">(T something)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;eat:&quot;</span> + something);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><p>List、Set、Map都是常用的泛型类，<strong>实例化泛型类</strong>的时候需要指定类型：</p><p><code>List&lt;String&gt; list = new ArrayList&lt;&gt;()</code></p><p>自定义自己的泛型类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pair</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> T first;<br>    <span class="hljs-keyword">private</span> T last;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Pair</span><span class="hljs-params">(T first, T last)</span> &#123;<br>        <span class="hljs-built_in">this</span>.first = first;<br>        <span class="hljs-built_in">this</span>.last = last;<br>    &#125;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getFirst</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> first;<br>    &#125;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getLast</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> last;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><p>泛型方法相比泛型类更加复杂，<strong>泛型类，是在实例化类的时候指明泛型的具体类型；泛型方法，是在调用方法的时候指明泛型的具体类型</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 泛型方法的基本介绍</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> tClass 传入的泛型实参</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> T 返回值为T类型</span><br><span class="hljs-comment"> * 说明：</span><br><span class="hljs-comment"> *     1）public 与 返回值中间&lt;T&gt;非常重要，可以理解为声明此方法为泛型方法。</span><br><span class="hljs-comment"> *     2）只有声明了&lt;T&gt;的方法才是泛型方法，泛型类中的使用了泛型的成员方法并不是泛型方法。</span><br><span class="hljs-comment"> *     3）&lt;T&gt;表明该方法将使用泛型类型T，此时才可以在方法中使用泛型类型T。</span><br><span class="hljs-comment"> *     4）与泛型类的定义一样，此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">genericMethod</span><span class="hljs-params">(Class&lt;T&gt; tClass)</span><span class="hljs-keyword">throws</span> InstantiationException ,<br>  IllegalAccessException&#123;<br>        <span class="hljs-type">T</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> tClass.newInstance();<br>        <span class="hljs-keyword">return</span> instance;<br>&#125;<br></code></pre></td></tr></table></figure><p>当泛型方法出现在泛型类中时，两者的泛型标志符所代表的意义不同：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pair</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> T first;<br>    <span class="hljs-keyword">private</span> T last;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Pair</span><span class="hljs-params">(T first, T last)</span> &#123;<br>        <span class="hljs-built_in">this</span>.first = first;<br>        <span class="hljs-built_in">this</span>.last = last;<br>    &#125;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getFirst</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> first;<br>    &#125;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getLast</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> last;<br>    &#125;<br>   <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 该泛型方法的T和泛型类的T不同</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> param</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">printType</span><span class="hljs-params">(T param)</span> &#123;<br>        System.out.println(param.getClass());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Pair&lt;String&gt; pair = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>&lt;&gt;(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);<br>pair.printType(<span class="hljs-number">1</span>);  <span class="hljs-comment">// class java.lang.Integer</span><br></code></pre></td></tr></table></figure><p>从结果可以看出泛型方法会维护自己的类型，在调用方法的时候指明了具体类型。因此在泛型类中使用泛型方法时最好换一个标识符，以免对代码阅读产生歧义。</p><h2 id="泛型擦除"><a href="#泛型擦除" class="headerlink" title="泛型擦除"></a>泛型擦除</h2><p>开头提到了<strong>泛型擦除</strong>，Java的泛型机制其实是伪泛型，<strong>在编译期间，所有的泛型信息都会被擦掉，这也就是通常所说类型擦除</strong>。</p><p>编译器会在编译期间会动态地将泛型<code>T</code>擦除为 <code>Object</code> 或将<code>T extends xxx</code>擦除为其限定类型<code>xxx</code>。</p><p>因此，泛型本质上其实还是编译器的行为，为了保证引入泛型机制但不创建新的类型，减少虚拟机的运行开销，编译器通过擦除将泛型类转化为⼀般类。</p><p>比如下面方法的重载就会报错，因为类型擦除后两个方法的签名一样，参数类型都是List，IDEA也会提示*’sameMethod(List<String>)’ 与 ‘sameMethod(List<Integer>)’ 冲突；两个方法具有相同的擦除*。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sameMethod</span><span class="hljs-params">(List&lt;String&gt; list)</span>&#123;<br>    System.out.println(list.size());<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sameMethod</span><span class="hljs-params">(List&lt;Integer&gt; list)</span>&#123;<br>    System.out.println(list.size());<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>那么为什么还需要泛型呢，用Object不好吗？</strong></p><p>当然是因为泛型带来的好处：</p><ul><li>使用泛型可在编译期间进行类型检测。</li><li>如果使用Object，需要手动进行强制类型转换，大大降低了代码可读性，提高了出错概率，而泛型会在使用时根据类型自动转换。</li><li>泛型还可以使用自限定类型如 T extends Comparable</li></ul><h2 id="泛型注意事项"><a href="#泛型注意事项" class="headerlink" title="泛型注意事项"></a>泛型注意事项</h2><p>泛型的注意事项大多是由擦除机制引出的。</p><p>注意事项：</p><ul><li><p>泛型的类型参数只能是类类型，不能是简单类型（泛型擦除后为Object类型）</p></li><li><p>不能对确切的泛型类型使用<code>instanceof</code>操作（类型擦除后，无法判断其确切的类型）</p></li><li><p>不能实例化泛型参数的数组。擦除后为Object后无法进行类型判断。</p></li><li><p>不能实例化泛型数组。</p></li><li><p>不能使用<code>static</code>修饰泛型变量。</p></li><li><p>不能用<strong>泛型类</strong>作为静态方法返回值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pair</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> T first;<br>    <span class="hljs-keyword">private</span> T last;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Pair</span><span class="hljs-params">(T first, T last)</span> &#123;<br>        <span class="hljs-built_in">this</span>.first = first;<br>        <span class="hljs-built_in">this</span>.last = last;<br>    &#125;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getFirst</span><span class="hljs-params">()</span> &#123; ... &#125;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getLast</span><span class="hljs-params">()</span> &#123; ... &#125;<br><br>    <span class="hljs-comment">// 对静态方法使用&lt;T&gt;:会导致编译错误</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Pair&lt;T&gt; <span class="hljs-title function_">create</span><span class="hljs-params">(T first, T last)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>&lt;T&gt;(first, last);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为在java中泛型只是一个占位符，必须在传递类型后才能使用。就泛型类而言，类实例化时才能传递真正的类型参数，<strong>由于静态方法的加载先于类的实例化</strong>，也就是说类中的泛型还没有传递真正的类型参数时，静态方法就已经加载完成。</p><p>显然，静态方法不能使用&#x2F;访问泛型类中的泛型。因此，也不能定义静态泛型变量，因为静态变量在java程序一运行时就已经被载入内存，而此时它的类型无法确定，而开辟空间必须知道类型，两者矛盾。</p><p>那么，对于静态方法，我们可以单独改写为“泛型”方法，只需要使用另一个类型即可。（再次说明：泛型方法使用的标志和泛型类中的，即使符号一样，代表的意义也不同）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pair</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> T first;<br>    <span class="hljs-keyword">private</span> T last;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Pair</span><span class="hljs-params">(T first, T last)</span> &#123;<br>        <span class="hljs-built_in">this</span>.first = first;<br>        <span class="hljs-built_in">this</span>.last = last;<br>    &#125;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getFirst</span><span class="hljs-params">()</span> &#123; ... &#125;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getLast</span><span class="hljs-params">()</span> &#123; ... &#125;<br><br>    <span class="hljs-comment">// 静态泛型方法/泛型方法应该使用其他类型区分:</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;K&gt; Pair&lt;K&gt; <span class="hljs-title function_">create</span><span class="hljs-params">(K first, K last)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>&lt;K&gt;(first, last);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h1><p>Java泛型中的通配符机制的目的是：让一个持有特定类型（比如A类型）的集合能够强制转换为持有A的子类或父类型的集合。</p><p>现在有三个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CuteAnimal</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;noname&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CuteDog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CuteAnimal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;cute dog&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CuteCat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CuteAnimal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;cute cat&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果我有两个列表，那么它们之间不能相互赋值，因为泛型已经限定了能放入列表的类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;CuteDog&gt; dogList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>List&lt;CuteCat&gt; catList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><span class="hljs-comment">// 不合法操作</span><br>dogList=catList;<br>catList=dogList;<br></code></pre></td></tr></table></figure><p>当需要写一个通用的方法时，它可以操作含有特定类型元素的集合，就需要这种赋值机制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printCute</span><span class="hljs-params">(List&lt;CuteAnimal&gt; animals)</span>&#123;<br>    <span class="hljs-keyword">for</span>(CuteAnimal animal : animals)&#123;<br>        animal.getName();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 不合法操作，因为该方法需要的是List&lt;CuteAnimal&gt;，而不是List&lt;CuteDog&gt;</span><br>printCute(dogList);<br></code></pre></td></tr></table></figure><p>这时候就需要通配符了，泛型通配符主要针对以下两种需求：</p><p>● 从一个泛型集合里面读取元素</p><p>● 往一个泛型集合里面插入元素</p><p>定义的方法有三种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;?&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>List&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CuteAnimal</span>&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>List&lt;? <span class="hljs-built_in">super</span> CuteAnimal&gt; list3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><h2 id="无界通配符"><a href="#无界通配符" class="headerlink" title="无界通配符"></a>无界通配符</h2><p><code>List&lt;?&gt; list1 = new ArrayList&lt;&gt;();</code></p><p><code>List&lt;?&gt;</code>的意思是可以持有任何类型，相当于Object。因为你不知道集合是哪种类型，所以你只能够对集合进行读操作，并且你只能把读取到的元素当成Object来对待。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printCute</span><span class="hljs-params">(List&lt;?&gt; animals)</span> &#123;<br>    <span class="hljs-keyword">for</span> (Object animal : animals) &#123;<br>        animal.getName(); <span class="hljs-comment">//错误的，由于不知道类型，不能调用具体方法</span><br>        System.out.println(animal);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="上界通配符"><a href="#上界通配符" class="headerlink" title="上界通配符"></a>上界通配符</h2><p><code>List&lt;? extends CuteAnimal&gt; list2 = new ArrayList&lt;&gt;();</code></p><p>表示该List可以拥有<code>CuteAnimal</code>及其子类（顾名思义上界，最上层就是<code>CuteAnimal</code>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 此时已知列表中是CuteAnimal及其子类，可以强制转换并调用方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printCute</span><span class="hljs-params">(List&lt;? extends CuteAnimal&gt; animals)</span> &#123;<br>    <span class="hljs-keyword">for</span> (CuteAnimal animal : animals) &#123;<br>        animal.getName();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 合法操作</span><br>printCute(dogList);<br>printCute(catList);<br></code></pre></td></tr></table></figure><p>但是仍然不能进行添加操作，比如在方法中<code>animals.add(new CuteCat());</code>是错误的。</p><h2 id="下界通配符"><a href="#下界通配符" class="headerlink" title="下界通配符"></a>下界通配符</h2><p><code>List&lt;? super CuteAnimal&gt; list3 = new ArrayList&lt;&gt;();</code></p><p>表示List可以拥有<code>CuteAnimal</code>及其父类（顾名思义上界，最起码要传入CuteAnimal类型，而不能是它的子类型）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertCute</span><span class="hljs-params">(List&lt;? <span class="hljs-built_in">super</span> CuteAnimal&gt; animals)</span> &#123;<br>    animals.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CuteAnimal</span>());<br>    animals.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CuteCat</span>());<br>    animals.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CuteDog</span>());<br>&#125;<br><br><span class="hljs-comment">// 合法操作</span><br>List&lt;Object&gt; objList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>insertCute(objList);<br><span class="hljs-comment">// 不合法操作</span><br>insertCute(dogList); <br></code></pre></td></tr></table></figure><p>此时进行可以插入操作，但是不能读，除非转换为Object，因为调用<code>insertCute</code>时，元素已经存在于list集合里，这个元素的类型可能是<code>CuteAnimal</code>类型，也能是CuteAnimal的父类型，但是我们不可能精确地知道它的类型是什么。</p><p>总结：上下界分别对应了集合的读、写操作。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Element+Vue实现动态表单(多个下拉框组件)</title>
    <link href="/2023/61898.html"/>
    <url>/2023/61898.html</url>
    
    <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>表单的内容为巡检计划，巡检计划可以选择多个巡检点位，每个巡检点位可以选择多个设备和对应操作。</p><h1 id="最终效果图"><a href="#最终效果图" class="headerlink" title="最终效果图"></a>最终效果图</h1><ul><li>点击加号图标增加一个下拉框</li><li>减号图标删除对应下拉框</li><li>下拉框备选项目相同</li><li>点击设置动作按钮，弹出可编辑表格，可以为该巡检点位设置多个动作<br><img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/89ae066b1ace49f0875db810467506da.png"></li><li>表格每行内容可编</li><li>设别名称下拉框和设备动作下拉框联动</li><li>操作按钮可对选项进行上下排序<br><img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/d6194d695a114e4d9ab62e095cd6f129.png"></li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><ol><li>定义表单结构<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-dialog</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;dialogTitle&quot;</span> <span class="hljs-attr">:visible.sync</span>=<span class="hljs-string">&quot;addDialogOpen&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;650px&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dialogForm&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">:rules</span>=<span class="hljs-string">&quot;rules&quot;</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">&quot;addForm&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;addForm&quot;</span> <span class="hljs-attr">label-width</span>=<span class="hljs-string">&quot;80px&quot;</span>&gt;</span><br>精简了无关代码<br>       <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;巡检内容&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;patrolContent&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;patrol-content&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;point&quot;</span>&gt;</span><br>           patrolContent元素个数控制下拉框的个数<br>           循环渲染<br>           每个div中包含一个下拉框、三个按钮<br>             <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;point-item&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in addForm.patrolContent&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;point-select&quot;</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;item.point&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;selectItem&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请选择巡检点位(先选择地图)&quot;</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in pointOptions&quot;</span></span><br><span class="hljs-tag">                              <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span></span><br><span class="hljs-tag">                              <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;item.point_name&quot;</span></span><br><span class="hljs-tag">                              <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item.point_name&quot;</span>&gt;</span><br>                   <span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br>                 <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;el-icon-circle-plus&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span></span><br><span class="hljs-tag">                            @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addPointSelectItem(index)&quot;</span>/&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;el-icon-remove&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;info&quot;</span></span><br><span class="hljs-tag">                            @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;removePointSelectItem(index)&quot;</span>/&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;success&quot;</span></span><br><span class="hljs-tag">                            @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addDeviceAction(index)&quot;</span>&gt;</span>设置动作<br>                 <span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-dialog</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>在data()中定义需要绑定的模板变量</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">addForm</span>: &#123;<br>  <span class="hljs-attr">patrolContent</span>: [ <span class="hljs-comment">//有多少个元素就渲染多少个下拉框</span><br>    &#123;<br>      <span class="hljs-attr">point</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">//点位</span><br>      <span class="hljs-attr">children</span>: [], <span class="hljs-comment">//对应每个点位的具体动作</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>定义增减下拉框的方法，实现动态增减</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 增加一个巡检点下拉框</span><br><span class="hljs-title function_">addPointSelectItem</span>(<span class="hljs-params">index</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">addForm</span>.<span class="hljs-property">patrolContent</span>.<span class="hljs-title function_">splice</span>(index + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>,<br>      &#123;<br>        <span class="hljs-attr">point</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-attr">children</span>: [] <span class="hljs-comment">//为空表示该点还未设置动作</span><br>      &#125;<br>  )<br>&#125;,<br><span class="hljs-comment">// 删除一个巡检点下拉框</span><br><span class="hljs-title function_">removePointSelectItem</span>(<span class="hljs-params">index</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">addForm</span>.<span class="hljs-property">patrolContent</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">addForm</span>.<span class="hljs-property">patrolContent</span>.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>)<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>至此，已经实现了下拉框的动态增减，且下拉框的选项之间互不影响。<br>接下来继续实现每个点位可以配置不同的动作。</p><ol start="4"><li>定义打开动作弹窗的函数</li></ol><p>这里在打开弹窗时，首先获取到所点击的下拉框索引值index，index代表了该元素在patrolContent中的位置，通过index获取表格要绑定的变量（该元素中的children）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 在该点位添加动作:打开弹窗</span><br><span class="hljs-title function_">addDeviceAction</span>(<span class="hljs-params">index</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">dialogTableData</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">addForm</span>.<span class="hljs-property">patrolContent</span>[index].<span class="hljs-property">children</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">deviceDialogOpen</span> = <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>定义动作弹窗</li></ol><p>在弹窗打开时，表格会根据children中的元素进行渲染。<br>表格借助<code>v-if</code>实现了编辑和确认编辑逻辑。<br>实现表格项的增删较为简单，增删children列表中的元素即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-dialog</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;选择动作&quot;</span> <span class="hljs-attr">:visible.sync</span>=<span class="hljs-string">&quot;deviceDialogOpen&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;800px&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;device-dialog&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;dialogTableData&quot;</span> <span class="hljs-attr">border</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;序号&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;50&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;设备名称&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;device&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;scope.row.edit&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;scope.row.device&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;selectItem&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;选择设备&quot;</span></span><br><span class="hljs-tag">                     @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;deviceSelectChange&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;机械臂&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;机械臂&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;升降台&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;升降台&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;摄像头&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;摄像头&quot;</span>/&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;!scope.row.edit&quot;</span>&gt;</span><br>            &#123;&#123; scope.row.device &#125;&#125;<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;设备动作&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;action&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;scope.row.edit&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">value-key</span>=<span class="hljs-string">&quot;id&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;scope.row.action&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;selectItem&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;选择动作&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in actionOptions&quot;</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.label&quot;</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item.value&quot;</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;item.label&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;!scope.row.edit&quot;</span>&gt;</span><br>            &#123;&#123; scope.row.action[&#x27;action_name&#x27;] &#125;&#125;<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;操作&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;!scope.row.edit&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;editAction(scope.row)&quot;</span>&gt;</span>编辑<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;success&quot;</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;scope.row.edit&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;scope.row.edit=!scope.row.edit&quot;</span>&gt;</span><br>            确定<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;danger&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;delAction(scope.$index)&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">plain</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;upMoveItem(scope.$index)&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;el-icon-caret-top&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;warning&quot;</span> <span class="hljs-attr">plain</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;downMoveItem(scope.$index)&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;el-icon-caret-bottom&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;warning&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addAction&quot;</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;deviceDialogOpen=false&quot;</span>&gt;</span>确定<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-dialog</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="6"><li>实现表格项增减方法以及排序方法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 弹窗-表格中增加一条数据</span><br><span class="hljs-title function_">addAction</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">dialogTableData</span>.<span class="hljs-title function_">push</span>(&#123;<br>    <span class="hljs-attr">device</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">//绑定设备选项</span><br>    <span class="hljs-attr">action</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">//绑定设备动作选项</span><br>    <span class="hljs-attr">edit</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 默认可编辑</span><br>  &#125;)<br>&#125;,<br><span class="hljs-comment">// 弹窗-删除表格中的一条数据</span><br><span class="hljs-title function_">delAction</span>(<span class="hljs-params">index</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">dialogTableData</span>.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>)<br>&#125;,<br><span class="hljs-comment">// 上移元素</span><br><span class="hljs-title function_">upMoveItem</span>(<span class="hljs-params">index</span>) &#123;<br>  <span class="hljs-keyword">let</span> table = <span class="hljs-variable language_">this</span>.<span class="hljs-property">dialogTableData</span><br>  <span class="hljs-keyword">if</span> (index !== <span class="hljs-number">0</span>) &#123;<br>    table[index] = table.<span class="hljs-title function_">splice</span>(index - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, table[index])[<span class="hljs-number">0</span>]<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    table.<span class="hljs-title function_">push</span>(table.<span class="hljs-title function_">shift</span>())<br>  &#125;<br>&#125;,<br><span class="hljs-comment">// 下移元素</span><br><span class="hljs-title function_">downMoveItem</span>(<span class="hljs-params">index</span>) &#123;<br>  <span class="hljs-keyword">let</span> table = <span class="hljs-variable language_">this</span>.<span class="hljs-property">dialogTableData</span><br>  <span class="hljs-keyword">if</span> (index !== table.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) &#123;<br>    table[index] = table.<span class="hljs-title function_">splice</span>(index + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, table[index])[<span class="hljs-number">0</span>];<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    table.<span class="hljs-title function_">unshift</span>(table.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]);<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>需要明确嵌套层级，vue组件要绑定到正确的变量上</li><li>为某个选项增加具体动作时，要获取到索引，这样才能根据索引获取该选项下的数据</li><li>选项的增删和排序都利用了<code>splice()</code>函数</li></ul>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>element ui</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在CentOS中使用Crow-基于C++的Web服务</title>
    <link href="/2022/52455.html"/>
    <url>/2022/52455.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>crow是一个基于C++的web微服务框架，在使用上和python中的flask框架类似，利用它我们可以设计RESTful Api。使用crow需要在CentOS中搭建C++开发环境，安装所需依赖。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ol><li>搭建C++开发环境</li><li>安装crow所需依赖</li><li>测试</li></ol><h1 id="1-搭建C-开发环境"><a href="#1-搭建C-开发环境" class="headerlink" title="1.搭建C++开发环境"></a>1.搭建C++开发环境</h1><p>安装以下工具</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> gcc<br>yum -y <span class="hljs-keyword">install</span> gcc-c++<br>yum -y <span class="hljs-keyword">install</span> gdb<br>yum -y <span class="hljs-keyword">install</span> git<br>yum -y <span class="hljs-keyword">install</span> cmake<br>yum -y <span class="hljs-keyword">install</span> vim*<br></code></pre></td></tr></table></figure><p>测试hello world程序  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++">hello.cpp:<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello World\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译运行：<br><image width="500" src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/1.c%2B%2B%E7%8E%AF%E5%A2%83%E6%B5%8B%E8%AF%95.png"/></p><h1 id="2-安装安装crow所需依赖"><a href="#2-安装安装crow所需依赖" class="headerlink" title="2.安装安装crow所需依赖"></a>2.安装安装crow所需依赖</h1><p>项目地址：<a href="https://github.com/ipkn/crow">https://github.com/ipkn/crow</a><br>克隆到本地：<code>git clone https://gitclone.com/github.com/ipkn/crow.git</code><br>只是为了使用的话，可以直接下载完整的头文件：<a href="https://github.com/ipkn/crow/releases/download/v0.1/crow_all.h">https://github.com/ipkn/crow/releases/download/v0.1/crow_all.h</a><br>crow依赖于boost library，可以进行编译安装，或者选择简单的方法：<code>yum install boost boost-devel</code>，若系统缺少openssl，也需安装<code>yum install openssl openssl-devel</code></p><h1 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h1><p>首先需要搭建一个C++项目，这样可以使用cmake命令帮助我们编译  </p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">mkdir</span> crowTest<br><span class="hljs-keyword">cd</span> crowTest<br><br><span class="hljs-keyword">mkdir</span> bin<br><span class="hljs-keyword">mkdir</span> lib<br><span class="hljs-keyword">mkdir</span> src<br><span class="hljs-keyword">mkdir</span> <span class="hljs-keyword">include</span><br><span class="hljs-keyword">mkdir</span> build<br>touch CMakeLists.txt<br></code></pre></td></tr></table></figure><p>将前文中下载的 <em>crow_all.h</em> 文件放入include文件夹中，同时在src下新建 <em>hello.cpp</em> 文件，内容参考crow项目中的自带示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++">hello.cpp:<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;crow_all.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    crow::SimpleApp app;<br><br>    <span class="hljs-built_in">CROW_ROUTE</span>(app, <span class="hljs-string">&quot;/&quot;</span>)([]()&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello world\n&quot;</span>;<br>    &#125;);<br><br>    app.<span class="hljs-built_in">port</span>(<span class="hljs-number">18080</span>).<span class="hljs-built_in">multithreaded</span>().<span class="hljs-built_in">run</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p><em>CMakeLists.txt</em> 中的内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs txt">project(crowTest)<br><br>set(EXECUTABLE_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;/bin)<br>set(LIBRARY_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;/lib)<br>include_directories($&#123;PROJECT_SOURCE_DIR&#125;/include)<br><br>set(BOOST_ROOT &quot;/usr/include/boost&quot;)<br>set(BOOSTROOT &quot;/usr/include/boost&quot;)<br>include_directories(/usr/include)<br>link_directories(/usr/lib)<br><br>FIND_PACKAGE(Threads REQUIRED)<br>SET(Boost_USE_MULTITHREADED ON)<br>find_package(Boost REQUIRED COMPONENTS system)<br><br>add_executable(crowTest src/hello.cpp)<br>target_link_libraries(crowTest boost_thread boost_system $&#123;CMAKE_THREAD_LIBS_INIT&#125;)<br></code></pre></td></tr></table></figure><p>1-4行设置项目相关信息，接下来设置boost相关信息，需要根据boost的安装位置来设置  </p><p>完成后进行编译：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> build<br><br>cmake<br><span class="hljs-keyword">make</span><br></code></pre></td></tr></table></figure><p>编译成功后进入项目的bin目录下，启动：<br><image width="600" src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/2.%E5%90%AF%E5%8A%A8.png"/></p><p>正式环境下我们需要使用nohup在后台运行，这里是为了方便测试，我们可以在另一个会话中进行测试：<br><image width="600" src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/3.%E6%B5%8B%E8%AF%95%E6%88%90%E5%8A%9F.png" /></p><p>测试成功</p><p>对于已有程序，可以结合crow，对外提供服务。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://blog.csdn.net/bcbobo21cn/article/details/105131176">CentOS搭建C++开发环境</a><br><a href="https://www.php.cn/centos/445383.html">centos 安装vim</a><br><a href="https://blog.csdn.net/Jackie_vip/article/details/105762378">Linux安装openssl</a><br><a href="https://www.jianshu.com/p/e6ad3e505d5b">搭建C++微服务 crow</a><br><a href="https://www.jianshu.com/p/813b1c1cd942">Linux下使用cake构建c++项目</a>  </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++ web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows Terminal安装与配置</title>
    <link href="/2022/3972.html"/>
    <url>/2022/3972.html</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ol><li>安装新版Windows Terminal</li><li>安装新版PowerShell</li><li>安装所需模块</li></ol><h1 id="1-安装Windows-Terminal预览版"><a href="#1-安装Windows-Terminal预览版" class="headerlink" title="1.安装Windows Terminal预览版"></a>1.安装Windows Terminal预览版</h1><h2 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h2><p>在Windows商店搜索Windows Terminal，会有两个版本，正式版和预览版。两个版本选择一个即可，直接点击安装。<br><img width="500" src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/win10商店.png"/>  </p><p>在Windows Terminal中可以打开不同的命令行，如自带的Windows PowerShell，Anaconda Prompt，Git Bash等等，当然也有经典的cmd。<br><img width="500" src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/1648087472258.png"/>  </p><h2 id="1-2-字体配置"><a href="#1-2-字体配置" class="headerlink" title="1.2 字体配置"></a>1.2 字体配置</h2><p>接下来的插件需要Nerd Font也就是等宽字体的支持，<a href="https://www.nerdfonts.com/font-downloads">下载所需字体</a>。这里选择了JetBrainsMono Nerd Font，安装完成后在Terminal设置中启用<br><img width="600" src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/1648105002672.png"/>  </p><h2 id="1-3-配色方案"><a href="#1-3-配色方案" class="headerlink" title="1.3 配色方案"></a>1.3 配色方案</h2><p>配色方案可以理解为IDE中的代码颜色配置，Windows Terminal的设置均可在JSON文件中做对应修改，部分配置如下：profiles属性中包含了所有可以在终端中打开的命令行，schemes属性中则是不同的配色方案，更多的配色方案可以在<a href="https://windowsterminalthemes.dev/">Terminal配色方案</a>中进行预览。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;$help&quot;</span>: <span class="hljs-string">&quot;https://aka.ms/terminal-documentation&quot;</span>,<br>    <span class="hljs-attr">&quot;$schema&quot;</span>: <span class="hljs-string">&quot;https://aka.ms/terminal-profiles-schema&quot;</span>,<br>    <span class="hljs-attr">&quot;actions&quot;</span>: <br>    [<br>        &#123;<br>            <span class="hljs-attr">&quot;command&quot;</span>: <span class="hljs-string">&quot;paste&quot;</span>,<br>            <span class="hljs-attr">&quot;keys&quot;</span>: <span class="hljs-string">&quot;ctrl+v&quot;</span><br>        &#125; <br>    ],<br>    <span class="hljs-attr">&quot;copyFormatting&quot;</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>    <span class="hljs-attr">&quot;copyOnSelect&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">&quot;defaultProfile&quot;</span>: <span class="hljs-string">&quot;&#123;574e775e-4f2a-5b96-ac1e-a2962a402336&#125;&quot;</span>,<br>    <span class="hljs-attr">&quot;profiles&quot;</span>: <br>    &#123;<br>        <span class="hljs-attr">&quot;defaults&quot;</span>: <br>        &#123;<br>            <span class="hljs-attr">&quot;backgroundImage&quot;</span>: <span class="hljs-string">&quot;C:\\Users\\22715\\Pictures\\\u5fae\u8f6f\u732b\u5934\u9e704k\u58c1\u7eb8_\u5f7c\u5cb8\u56fe\u7f51.jpg&quot;</span>,<br>            <span class="hljs-attr">&quot;colorScheme&quot;</span>: <span class="hljs-string">&quot;One Half Dark&quot;</span>,<br>            <span class="hljs-attr">&quot;font&quot;</span>: <br>            &#123;<br>                <span class="hljs-attr">&quot;face&quot;</span>: <span class="hljs-string">&quot;JetBrainsMono Nerd Font Mono&quot;</span><br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">&quot;list&quot;</span>: <br>        [<br>            &#123;<br>                <span class="hljs-attr">&quot;backgroundImage&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-attr">&quot;backgroundImageOpacity&quot;</span>: <span class="hljs-number">1.0</span>,<br>                <span class="hljs-attr">&quot;font&quot;</span>: <br>                &#123;<br>                    <span class="hljs-attr">&quot;face&quot;</span>: <span class="hljs-string">&quot;JetBrainsMono NF&quot;</span><br>                &#125;,<br>                <span class="hljs-attr">&quot;guid&quot;</span>: <span class="hljs-string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span>,<br>                <span class="hljs-attr">&quot;hidden&quot;</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Windows PowerShell&quot;</span>,<br>                <span class="hljs-attr">&quot;opacity&quot;</span>: <span class="hljs-number">90</span>,<br>                <span class="hljs-attr">&quot;useAcrylic&quot;</span>: <span class="hljs-literal">true</span><br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">&quot;altGrAliasing&quot;</span>: <span class="hljs-literal">true</span>,<br>                <span class="hljs-attr">&quot;antialiasingMode&quot;</span>: <span class="hljs-string">&quot;grayscale&quot;</span>,<br>                <span class="hljs-attr">&quot;backgroundImage&quot;</span>: <span class="hljs-string">&quot;C:\\Users\\22715\\Pictures\\\u5fae\u8f6f\u732b\u5934\u9e704k\u58c1\u7eb8_\u5f7c\u5cb8\u56fe\u7f51.jpg&quot;</span>,<br>                <span class="hljs-attr">&quot;backgroundImageOpacity&quot;</span>: <span class="hljs-number">0.84999999999999998</span>,<br>                <span class="hljs-attr">&quot;closeOnExit&quot;</span>: <span class="hljs-string">&quot;graceful&quot;</span>,<br>                <span class="hljs-attr">&quot;commandline&quot;</span>: <span class="hljs-string">&quot;C:\\Program Files\\PowerShell\\7\\pwsh.exe&quot;</span>,<br>                <span class="hljs-attr">&quot;cursorShape&quot;</span>: <span class="hljs-string">&quot;bar&quot;</span>,<br>                <span class="hljs-attr">&quot;font&quot;</span>: <br>                &#123;<br>                    <span class="hljs-attr">&quot;face&quot;</span>: <span class="hljs-string">&quot;JetBrainsMono NF&quot;</span>,<br>                    <span class="hljs-attr">&quot;size&quot;</span>: <span class="hljs-number">12</span><br>                &#125;,<br>                <span class="hljs-attr">&quot;guid&quot;</span>: <span class="hljs-string">&quot;&#123;a9a62ce5-2c5a-51a3-8cbc-9069d6e77fdd&#125;&quot;</span>,<br>                <span class="hljs-attr">&quot;hidden&quot;</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-attr">&quot;historySize&quot;</span>: <span class="hljs-number">9001</span>,<br>                <span class="hljs-attr">&quot;icon&quot;</span>: <span class="hljs-string">&quot;D:\\Environment\\Anaconda\\Menu\\anaconda-navigator.ico&quot;</span>,<br>                <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Anaconda Prompt&quot;</span>,<br>                <span class="hljs-attr">&quot;padding&quot;</span>: <span class="hljs-string">&quot;8, 8, 8, 8&quot;</span>,<br>                <span class="hljs-attr">&quot;snapOnInput&quot;</span>: <span class="hljs-literal">true</span>,<br>                <span class="hljs-attr">&quot;startingDirectory&quot;</span>: <span class="hljs-string">&quot;%USERPROFILE%&quot;</span>,<br>                <span class="hljs-attr">&quot;useAcrylic&quot;</span>: <span class="hljs-literal">false</span><br>            &#125;,<br>        ]<br>    &#125;,<br>    <span class="hljs-attr">&quot;schemes&quot;</span>: <br>    [<br>        &#123;<br>            <span class="hljs-attr">&quot;background&quot;</span>: <span class="hljs-string">&quot;#0C0C0C&quot;</span>,<br>            <span class="hljs-attr">&quot;black&quot;</span>: <span class="hljs-string">&quot;#0C0C0C&quot;</span>,<br>            <span class="hljs-attr">&quot;blue&quot;</span>: <span class="hljs-string">&quot;#0037DA&quot;</span>,<br>            <span class="hljs-attr">&quot;brightBlack&quot;</span>: <span class="hljs-string">&quot;#767676&quot;</span>,<br>            <span class="hljs-attr">&quot;brightBlue&quot;</span>: <span class="hljs-string">&quot;#3B78FF&quot;</span>,<br>            <span class="hljs-attr">&quot;brightCyan&quot;</span>: <span class="hljs-string">&quot;#61D6D6&quot;</span>,<br>            <span class="hljs-attr">&quot;brightGreen&quot;</span>: <span class="hljs-string">&quot;#16C60C&quot;</span>,<br>            <span class="hljs-attr">&quot;brightPurple&quot;</span>: <span class="hljs-string">&quot;#B4009E&quot;</span>,<br>            <span class="hljs-attr">&quot;brightRed&quot;</span>: <span class="hljs-string">&quot;#E74856&quot;</span>,<br>            <span class="hljs-attr">&quot;brightWhite&quot;</span>: <span class="hljs-string">&quot;#F2F2F2&quot;</span>,<br>            <span class="hljs-attr">&quot;brightYellow&quot;</span>: <span class="hljs-string">&quot;#F9F1A5&quot;</span>,<br>            <span class="hljs-attr">&quot;cursorColor&quot;</span>: <span class="hljs-string">&quot;#FFFFFF&quot;</span>,<br>            <span class="hljs-attr">&quot;cyan&quot;</span>: <span class="hljs-string">&quot;#3A96DD&quot;</span>,<br>            <span class="hljs-attr">&quot;foreground&quot;</span>: <span class="hljs-string">&quot;#CCCCCC&quot;</span>,<br>            <span class="hljs-attr">&quot;green&quot;</span>: <span class="hljs-string">&quot;#13A10E&quot;</span>,<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Campbell&quot;</span>,<br>            <span class="hljs-attr">&quot;purple&quot;</span>: <span class="hljs-string">&quot;#881798&quot;</span>,<br>            <span class="hljs-attr">&quot;red&quot;</span>: <span class="hljs-string">&quot;#C50F1F&quot;</span>,<br>            <span class="hljs-attr">&quot;selectionBackground&quot;</span>: <span class="hljs-string">&quot;#FFFFFF&quot;</span>,<br>            <span class="hljs-attr">&quot;white&quot;</span>: <span class="hljs-string">&quot;#CCCCCC&quot;</span>,<br>            <span class="hljs-attr">&quot;yellow&quot;</span>: <span class="hljs-string">&quot;#C19C00&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;background&quot;</span>: <span class="hljs-string">&quot;#012456&quot;</span>,<br>            <span class="hljs-attr">&quot;black&quot;</span>: <span class="hljs-string">&quot;#0C0C0C&quot;</span>,<br>            <span class="hljs-attr">&quot;blue&quot;</span>: <span class="hljs-string">&quot;#0037DA&quot;</span>,<br>            <span class="hljs-attr">&quot;brightBlack&quot;</span>: <span class="hljs-string">&quot;#767676&quot;</span>,<br>            <span class="hljs-attr">&quot;brightBlue&quot;</span>: <span class="hljs-string">&quot;#3B78FF&quot;</span>,<br>            <span class="hljs-attr">&quot;brightCyan&quot;</span>: <span class="hljs-string">&quot;#61D6D6&quot;</span>,<br>            <span class="hljs-attr">&quot;brightGreen&quot;</span>: <span class="hljs-string">&quot;#16C60C&quot;</span>,<br>            <span class="hljs-attr">&quot;brightPurple&quot;</span>: <span class="hljs-string">&quot;#B4009E&quot;</span>,<br>            <span class="hljs-attr">&quot;brightRed&quot;</span>: <span class="hljs-string">&quot;#E74856&quot;</span>,<br>            <span class="hljs-attr">&quot;brightWhite&quot;</span>: <span class="hljs-string">&quot;#F2F2F2&quot;</span>,<br>            <span class="hljs-attr">&quot;brightYellow&quot;</span>: <span class="hljs-string">&quot;#F9F1A5&quot;</span>,<br>            <span class="hljs-attr">&quot;cursorColor&quot;</span>: <span class="hljs-string">&quot;#FFFFFF&quot;</span>,<br>            <span class="hljs-attr">&quot;cyan&quot;</span>: <span class="hljs-string">&quot;#3A96DD&quot;</span>,<br>            <span class="hljs-attr">&quot;foreground&quot;</span>: <span class="hljs-string">&quot;#CCCCCC&quot;</span>,<br>            <span class="hljs-attr">&quot;green&quot;</span>: <span class="hljs-string">&quot;#13A10E&quot;</span>,<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Campbell Powershell&quot;</span>,<br>            <span class="hljs-attr">&quot;purple&quot;</span>: <span class="hljs-string">&quot;#881798&quot;</span>,<br>            <span class="hljs-attr">&quot;red&quot;</span>: <span class="hljs-string">&quot;#C50F1F&quot;</span>,<br>            <span class="hljs-attr">&quot;selectionBackground&quot;</span>: <span class="hljs-string">&quot;#FFFFFF&quot;</span>,<br>            <span class="hljs-attr">&quot;white&quot;</span>: <span class="hljs-string">&quot;#CCCCCC&quot;</span>,<br>            <span class="hljs-attr">&quot;yellow&quot;</span>: <span class="hljs-string">&quot;#C19C00&quot;</span><br>        &#125;<br>    ],<br>    <span class="hljs-attr">&quot;useAcrylicInTabRow&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-安装PowerShell-7"><a href="#2-安装PowerShell-7" class="headerlink" title="2.安装PowerShell 7"></a>2.安装PowerShell 7</h1><p>自带PowerShell非常难用，且存在命令不兼容和编码问题，新版引入了更多的特性，<a href="https://docs.microsoft.com/zh-cn/powershell/scripting/whats-new/what-s-new-in-powershell-70?view=powershell-7.2">查看PowerShell 7.0 中的新增功能</a>。在GitHub中选择最新msi版本下载安装，<a href="https://github.com/PowerShell/PowerShell/releases/tag/v7.2.2">Release of PowerShell 7.0 </a>。</p><h1 id="3-安装所需模块"><a href="#3-安装所需模块" class="headerlink" title="3.安装所需模块"></a>3.安装所需模块</h1><h2 id="3-1-oh-my-posh"><a href="#3-1-oh-my-posh" class="headerlink" title="3.1 oh-my-posh"></a>3.1 oh-my-posh</h2><p>没有oh-my-posh的命令行没有灵魂，oh-my-posh提供了多种主题可供选择，让命令行更加好看，同时也能展示更多信息<br><img width="600" src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/1648106813065.png"/><br><a href="https://ohmyposh.dev/docs/windows">oh-my-posh安装</a>,在PowerShell中输入</p><pre><code class="text">Install-Module oh-my-posh -Scope CurrentUser</code></pre><p>模块会安装到我的电脑-文档-PowerShell中，同时，在这里目录下也会有名为<strong>Microsoft.PowerShell_profile.ps1</strong>的文件（没有可以手动新建）<br><img width="400" src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/20220324153858.png"/><br>该文件会作为个人配置在命令行启动之前执行，对于启用oh-my-posh来说，仅需要如下内容:</p><pre><code class="txt">Import-Module oh-my-poshSet-PoshPrompt gmay</code></pre><p>第一行导入模块，第二行设置主题，保存并重启终端。此时可以会遇到如下问题：<br><img width="400" src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/1648107998376.png"/>  </p><p>较为简单的解决方案是解除<strong>Microsoft.PowerShell_profile.ps1</strong>文件的锁定：<br><img width="400" src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/1648108106142.png"/>  </p><p>完成安装后重新进入PowerShell即可，输入命令  </p><pre><code class="text">Get-PoshThemes</code></pre><p>便可预览所有预置主题，若未出现主题预览，说明主题文件未下载成功，可手动下载<a href="https://github.com/JanDeDobbeleer/oh-my-posh/releases/download/v7.46.2/themes.zip">oh-my-posh主题包</a>，并放置到提示的位置。确定主题后，可再次修改<strong>Microsoft.PowerShell_profile.ps1</strong>中的初始化配置。<br>不同的命令行有不同的配置文件，比如我的电脑-文档-Windwos PowerShell目录下也有对于自带的Windows PowerShell配置，因此，不同的命令行可以设置不同的默认主题。<br><img width="400" src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/1648109422626.png"/></p><h2 id="3-2-gsudo"><a href="#3-2-gsudo" class="headerlink" title="3.2 gsudo"></a>3.2 gsudo</h2><p>命令行中许多命令需要管理员权限，通常需要重新以管理员权限打开新的命令行窗口，而gduso命令可以方便的在当前页面直接提升权限，体验和linux系统中的sudo命令相似。<br><img width="600" src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/1648104145673.png"/>  </p><p><a href="https://github.com/gerardog/gsudo">gduso-GitHub主页</a>提供了多种安装方式，使用WinGet方式较为方便，直接在命令行输入<code>winget install gerardog.gsudo</code></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://ohmyposh.dev/docs/config-overview">oh-my-posh官网</a><br><a href="https://www.cnblogs.com/venusian/p/14976143.html">windows terminal配置conda问题</a><br><a href="https://zhuanlan.zhihu.com/p/137595941">Windows Terminal 完美配置 PowerShell 7.1</a><br><a href="https://zhuanlan.zhihu.com/p/351281543">Window Terminal 安装以及使用</a>  </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ArcMap根据行政图校准延安市乡镇shp行政边界</title>
    <link href="/2021/225.html"/>
    <url>/2021/225.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在开发时，经常需要和地图打交道，比如展示某个区域的边界，一般拿到的数据是shp文件，但是最新的行政图数据往往不好获取。以陕西省延安市为例，第四级行政区的数据，也就是乡镇级的数据，还停留在2010年，然而2015年之后许多地区进行了重新的规划，导致我们的数据需要调整。好在甲方提供了2020年最新的JPG格式的行政区划图，那么能否根据标准的行政区划图来调整我们的shp文件呢，肯定可以。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ol><li>校准行政区划图坐标</li><li>调整shp行政边界</li><li>导出数据</li><li>展示</li></ol><h1 id="1-校准行政区划图坐标"><a href="#1-校准行政区划图坐标" class="headerlink" title="1. 校准行政区划图坐标"></a>1. 校准行政区划图坐标</h1><h2 id="1-1-添加图层"><a href="#1-1-添加图层" class="headerlink" title="1.1 添加图层"></a>1.1 添加图层</h2><p>这里分别添加未处理过的shp文件和行政区划图<br><img height="350" src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/1.1.png"/><br>这时点击下面图层看不到行政区划图是正常的，因为他的坐标可能不视野范围内，只需要右键-&gt;缩放至图层即可<br><img height="400" src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/1.2.png"/></p><h2 id="1-2-创建控制点进行校准"><a href="#1-2-创建控制点进行校准" class="headerlink" title="1.2 创建控制点进行校准"></a>1.2 创建控制点进行校准</h2><p>选择到行政区划图层，右键标题栏空白处，调出地理配准工具<br><img height="350" src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/1.3.png"/>  </p><p>地理配准工具中我们主要使用的一个操作就是创建控制点<br><img height="150" src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/1.4.png"/><br>简单理解就是在需要调整坐标的图层上先创建一个点，然后链接到坐标正确的图层的对应位置，ArcMap会自动帮我们调整，调整使用的算法可以自行选择一个效果最好的。</p><img style="margin-left:35px !important;" height="350" src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/添加控制点.gif"/>  <p>通过上面的操作可以看到，至少需要两对控制点以上，才能大致校准行政图位置。当添加前几个控制点无法直接靠移动鼠标找到点时，也可以右键缩放到图层进行选点。接下来就是添加更多的控制点，尽量选取边角和中心位置，可以减小误差。</p><p>下图是已经添加了4对控制点的地图，这时候上层的shp会挡住一部分区划图，影响选点。右键图层属性，设置合适的透明度。也可以更改shp面显示颜色，直接设置为空心（这里因为线条较多，暂时不设置）<br><img height="350" src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/1.5.png"/></p><p>继续添加控制点，尽可能使点均匀的分布在整个地图上，当发现继续添加点仍不能很好的校准时，就需要选择另外的校准算法了，点击链接表可以查看当前所有的控制点，可以删除残差较大的点，当控制点的数量足够多时，选择三阶多项式会有非常好的效果，这里我添加了21对控制点，可以看到最终的效果已经非常好了，shp图层的边界线和行政区划图几乎看不出明显的错位。<br><img height="350" src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/1.6.png"/></p><h2 id="1-3-保存校准后的行政区划图"><a href="#1-3-保存校准后的行政区划图" class="headerlink" title="1.3 保存校准后的行政区划图"></a>1.3 保存校准后的行政区划图</h2><p>要注意的是，行政图校准后并没有改变原图。因此，想要将校准后的行政图进行保存，需要导出，格式也可以自行选择，不同格式会有一定的画质损失。<br><img height="350" src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/1.7.png"/></p><h1 id="2-调整shp行政边界"><a href="#2-调整shp行政边界" class="headerlink" title="2. 调整shp行政边界"></a>2. 调整shp行政边界</h1><h1 id="2-1-分割面"><a href="#2-1-分割面" class="headerlink" title="2.1 分割面"></a>2.1 分割面</h1><p>经过导出，调整图层顺序后，较浅的黑色线条即为最终需要的边界。从下图可以看出，吴起街道占据了其他两个镇的部分地区，需要进行调整。<br><img height="350" src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/1.8.png"/>  </p><p>右键shp图层-&gt;编辑要素，或是点击编辑器-&gt;开始编辑，选中需要分割的面，选择编辑器中的面裁切工具，按照需要的边界开始描点，完成后按F2。<br><img height="350" src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/2.2.png"/></p><h1 id="2-2-合并面"><a href="#2-2-合并面" class="headerlink" title="2.2 合并面"></a>2.2 合并面</h1><p>经过裁切面后，从吴起街道中分出了一小块区域，这个区域在行政区画图中属于铁边城镇，因此需要合并。选中两个面，点击编辑器中的合并选项即可。<br><img height="350"  src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/2.3.png"/></p><p>同样的，经过相同的操作完成吴仓堡镇的调整，这样我们就得到了与行政区划图相同的shp数据。基本的思路就是分割大的面，将新增的面合并到需要的面中。<br><img height="350" src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/2.4.png"/>  </p><p><strong>在完成所有的修改后，不要忘记点击编辑器中的保存编辑。</strong></p><h1 id="3-导出数据"><a href="#3-导出数据" class="headerlink" title="3. 导出数据"></a>3. 导出数据</h1><p>按照需要可以自行导出处理后的数据，本文为了对每个乡镇单独进行显示，选择批量导出。具体的分割字段要以属性表中为准。<br><img height="350" src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/2.5.png"/></p><p>将导出的全部shp文件导入<a href="https://mapshaper.org/">mapshaper</a>中，再导出geojson格式的数据。</p><h1 id="4-展示"><a href="#4-展示" class="headerlink" title="4. 展示"></a>4. 展示</h1><p>geojson格式的数据可以直接使用高德api进行显示，当然在显示之前还需要将GPS坐标转换为火星坐标，具体的方法参照文章：<a href="https://blog.csdn.net/sinat_29675423/article/details/87879440">python-GPS坐标转火星坐标</a>。显示效果如下，可以看出数据基本吻合。<br><img height="350" src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/2.6.png"/></p><blockquote><p>参考</p><ul><li><a href="https://blog.csdn.net/ganlan1014/article/details/76356013">ArcGis地理配准步骤</a></li><li><a href="https://malagis.com/arcgis-arcmap-selection-factors.html">如何多选面要素</a></li><li><a href="https://jingyan.baidu.com/article/5d368d1e3abc977e60c057d6.html">ArcGis如何合并面</a></li><li><a href="https://blog.csdn.net/qq_19599645/article/details/78541810">ArcGis处理公共边</a></li><li><a href="https://www.jianshu.com/p/1a76f34e3788">ArcGis面公共边问题</a></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>地图</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ArcGIS</tag>
      
      <tag>行政边界</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx-图片等静态资源访问解决方案</title>
    <link href="/2021/8638.html"/>
    <url>/2021/8638.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前后端分离项目，或者是更一般的web项目，都有部分业务需要进行图片的展示。比如在列表中显示各种数据的图片，或是用户头像上传，甚至需要上传后回显。利用nginx是现在较为通用的解决方案。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ol><li>图片保存和显示的方式</li><li>配置nginx</li><li>前端逻辑</li><li>后端逻辑</li></ol><h1 id="1-图片保存和显示的方式"><a href="#1-图片保存和显示的方式" class="headerlink" title="1.图片保存和显示的方式"></a>1.图片保存和显示的方式</h1><p>通常，前端选择本地的图片后，发送到后端。后端将图片保存到本地指定目录中，同时在数据库中存入该图片的路径。当前端需要显示时也仅仅返回拼接后的路径，这里的路径随着nginx的配置不同而不同。</p><h1 id="2-配置nginx"><a href="#2-配置nginx" class="headerlink" title="2.配置nginx"></a>2.配置nginx</h1><p>通过nginx的代理，可以实现访问本地资源的需求。同时利用nginx带来的好处是，如果开发环境为windows，而部署环境为linux，只需要做不同的配置即可，代码不变。nginx.conf中的部分配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs txt">server &#123;<br>        listen       8086;<br>        server_name  localhost;<br>        <br>        location /localImage &#123;<br>            alias D:/testImage/;<br>            allow all;<br>            autoindex on;<br>        &#125;<br><br>        location / &#123;<br>            root   html;<br>            index  index.html index.htm;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这个配置监听本地的8086端口，alias指定了一个虚拟目录，当浏览器中访问<code>/localImage</code>时,就会去<code>D:/testImage/</code>下找资源。比如我在<code>D:/testImage/</code>下放了几张图片，在浏览器中输入<code>http://localhost:8086/localImage/</code>：<br><img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/20211216180737.png"><br>点击对应图片就会进行展示，这不正是前端所需要的么，写个demo试试。</p><h1 id="3-前端逻辑"><a href="#3-前端逻辑" class="headerlink" title="3.前端逻辑"></a>3.前端逻辑</h1><p>前端使用vue，采用elementui</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 400px; width: 400px; background-color: gray&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-upload</span></span><br><span class="hljs-tag">        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;avatar-uploader&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">:show-file-list</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">:http-request</span>=<span class="hljs-string">&quot;upload&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;imageUrl&quot;</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;imageUrl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;avatar&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">v-else</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-icon-plus avatar-uploader-icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-upload</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对应的上传方法为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">imageUrl</span>: <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">upload</span>(<span class="hljs-params">param</span>)</span>&#123;<br>      <span class="hljs-built_in">console</span>.log(param.file)<br>      <span class="hljs-keyword">let</span> formData=<span class="hljs-keyword">new</span> FormData()<br>      formData.append(<span class="hljs-string">&quot;file&quot;</span>,param.file);<br>      axios(&#123;<br>        <span class="hljs-attr">headers</span>: &#123;<br>          <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;multipart/form-data&#x27;</span>,<br>        &#125;,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>        <span class="hljs-attr">data</span>: formData,<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://localhost:8081/upload&#x27;</span>,<br>      &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.imageUrl = res.data; <span class="hljs-comment">//图片回显</span><br>        <span class="hljs-built_in">console</span>.log(res.data)<br>      &#125;);<br>    &#125;,<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>这里，在选择文件后，组件会将将本地图片转换为File，放在表单中进行发送。后端处理后返回该图片的url，在img标签中进行显示，实现回显功能。</p><h1 id="4-后端逻辑"><a href="#4-后端逻辑" class="headerlink" title="4.后端逻辑"></a>4.后端逻辑</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/upload&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">upload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;file&quot;)</span> MultipartFile file)</span></span>&#123;<br>    String fileName = file.getOriginalFilename();<br>    String path=<span class="hljs-string">&quot;D:/testImage/&quot;</span> + fileName;<br>    File dest = <span class="hljs-keyword">new</span> File( path);<br>    <span class="hljs-keyword">try</span> &#123;<br>        file.transferTo(dest); <span class="hljs-comment">// 保存文件到本地</span><br><br>        Image image=<span class="hljs-keyword">new</span> Image(); <span class="hljs-comment">//存数据库</span><br>        image.setPath(path);<br>        imageMapper.insert(image);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;http://localhost:8086/localImage/&quot;</span>+fileName;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;false&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>后端返回给前端的是一个在nginx中配置的url+图片名称，这样可以直接进行显示。效果如下：<br><img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/20211216185908.png"><br><img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/20211216185935.png"></p><blockquote><p>参考</p><ul><li><a href="https://www.jianshu.com/p/44fc4d7771e3">Nginx的root和alias</a></li><li>越子哥😋<img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/20211216190525.png"></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AutoHotKey-提高效率的神器</title>
    <link href="/2021/37732.html"/>
    <url>/2021/37732.html</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>AutoHotKey简称AHK，是一个脚本语言，可以通过编写脚本执行一些自动化任务，进行按键映射、控制鼠标、管理进程、管理窗口等等，太多了，第一次接触这个软件是看到少数派的一篇文章：<a href="https://sspai.com/post/57157">如何在打字时，快速移动光标？我整理的一套高效键盘映射方案 </a>，当时就感觉到这是一个极其强大的工具。在经过两年多的使用和修改后，这个软件已经成了脱离不了的东西。目前我使用到的功能和特性只是冰山一角，但是对效率的提升肉眼可见，或者说使用电脑的幸福感大大提高。👻可惜只能在Win平台使用（这玩意儿甚至成了我以后是否会买mac的一个重要因素）。</p><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><h2 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h2><p>AHK解决了几个电脑使用的痛点，当然如果平时不是很注意，或者没有对比体验，或者没有亲自上手使用，很难感同身受。</p><p><strong>1. 方向键</strong></p><ul><li>方向键是文字编辑时重度使用的按键（码字，写代码，写论文等），但是方向键并不在字母区，这就导致每一次移动光标，你都需要把手从字母区移开，当然还得再移回去，这个过程无形中打断了本应该流畅的输入，浪费时间不说，主要是累。特别是当你使用轻薄本上的半高方向键，（就是上下方向键合并成一个的那种，什么反人类设计👎按一次让人恼火一次）。<ul><li>文字编辑：在你输入成对的符号时，比如引号，小括号，大括号，书名号，如果编辑器不支持符号补全和光标自动居中，那么你打完两个符号后，光标停在末尾，你需要按左方向键移动光标到两个符号中间，再接着输入，输入完后，你需要再按一次右方向键。</li><li>写代码：虽然现在的IDE基本已经支持符号补全和光标居中（这也侧面说明了手动补全符号和移动光标是一件麻烦的事），甚至在VS中，当要结束一个语句时，你不需要把光标移动到末尾。<code>String str = new String(s|)</code>当你输入完s后，不需要移动光标到末尾打出一个分号，直接反手一个分号，VS会帮你自动补全到语句的末尾–&gt;<code>System.out.println(s);|</code>（不愧是宇宙最强IDE😆），（我发现IDEA在2021年9月的新版中也已经支持这个功能）。<br>但是这种情况只在你毫无破绽的连续输入下有效，要是你发现前面打错了，光标移动回去修改，或者是直接点击鼠标到别的地方，就不会帮你把分号放置到行尾了。同样，遇到<code>System.out.println(&quot;xxx|&quot;)</code>这种需要包裹在引号中的句子时，你还是得老老实实自己移动到行尾进行输入，不然就会把分号包含在引号中。</li></ul></li></ul><p class="note note-success"><strong>使用AHK后：摁住空格键，此时 i, j, k, l 四个键负责上、左、下、右，你只需要把手放在键盘上就知道这个位置是非常符合直觉的，在用正确指法打字的情况下，右手不需要移动，只需要动动手指头就能控制方向</strong></p><p><strong>2. 行首行尾</strong></p><ul><li>Home和End这两个按键日常我几乎不会使用，因为它真的太远了。但是不代表把光标移动到行首和行尾这个功能不好用，相反，在用了AHK之后，这两个操作的使用非常频繁：<ul><li>写代码移动到行尾输入分号</li><li>移动到行尾输入回车</li><li>需要修改一处文字时，快速移动到距离文字最近的地方</li><li>在修改完内容后，快速定位到行尾继续输入，而不是用鼠标定位</li><li>快速移动到行首/行尾删除前面/后面多余的字符</li><li>Shift+Home，选中从当前光标开始到行首的所有字符</li><li>Shift+End，选中从当前光标开始到行尾的所有字符  </li></ul></li></ul><p class="note note-success"><strong>使用AHK后：用空格+N映射Home键，空格+M映射End键，是的，N键和M键都在定位键J的下方，可以盲按，写代码再也不用摁方向键再输入分号了（Python：“啥是分号？”🙄）。空格+F+M实现选中一行，原理是摁下组合键后，先光标移动到行尾，再执行Shift+Home。</strong></p><p><strong>3. 逗号和句号</strong></p><ul><li>两个高频使用的符号，不管是在文字编辑或者写代码中。按道理说这两个按键的位置没有Home和End那么不堪，但是用起来还是不舒服，不够丝滑，即使我已经熟悉了所有的字母区位置，每次想打这两个符号的时候下意识还是会看一下键盘。 </li></ul><p class="note note-success"><strong>使用AHK后：空格+U映射为逗号，空格+O映射为句号，U和O的位置就非常友好了，属于食指和无名指的管辖范围之内，这是除了方向键映射之外我最喜欢的两个按键映射方案了。</strong></p><p><strong>4. 其余映射</strong></p><ul><li>Shift：键盘上的一排数字键对应了<code>!@#$%^&amp;*()_+</code>，尤其是写代码的时候，括号是频繁使用的符号，意味着Shift键需要经常去按，长时间使用下来小拇指是比较累的，更何况小拇指还要负责Ctrl键，简直是雪上加霜。经过两年多的使用和调整我只留下了<strong>空格+9 映射左括号和空格+0 映射右括号</strong>，毕竟这两个的使用最为频繁。</li><li>BackSpace和Delete：退格键不用说了，高强度使用的按键之一，同样距离遥远，好在退格键够大，还是比较好用的，但是对于一个追求细节的强迫症来说，多一套方案就多一分效率。<strong>空格+H 映射BackSpace键，空格+B 映射Delete键，是的，现在连删除字符都不需要大幅度移动手了。</strong></li><li>等号键：完全是为了写代码方便，<strong>空格+A 映射=号</strong>  </li></ul><p><strong>5. 传统快捷键映射</strong><br>Windows上的每一个快捷键几乎都有Ctrl的参与（小拇指可太累了），作为一个合格的CV工程师，除了复制粘贴的功夫必须到家，其他技能也不能落下。</p><ul><li>空格+S ：复制</li><li>空格+D ：粘贴</li><li>空格+E ：剪切</li><li>空格+R ：撤回</li><li>空格+Q ：全选</li></ul><h2 id="窗口管理"><a href="#窗口管理" class="headerlink" title="窗口管理"></a>窗口管理</h2><p>最大化，最小化，关闭等操作基本是靠鼠标完成的，但是有些时候键盘来的更快捷</p><ul><li>空格+1：最小化</li><li>空格+2：最大化全屏</li><li>空格+3：切换窗口最大化状态（相当于窗口右上角的第二个按钮）</li><li>空格+4：关闭窗口</li><li>空格+5：置顶/取消置顶当前窗口</li></ul><h2 id="模拟鼠标"><a href="#模拟鼠标" class="headerlink" title="模拟鼠标"></a>模拟鼠标</h2><p>没想到吧，还能移动鼠标指针，这里用大小写锁定键和ijkl配合</p><ul><li>CapLock+i：上移指针</li><li>CapLock+j：左移指针</li><li>CapLock+k：下移指针</li><li>CapLock+l：右移指针</li><li>CapLock+N：左键单击</li><li>CapLock+M：右键单击</li></ul><h2 id="其他自定义功能"><a href="#其他自定义功能" class="headerlink" title="其他自定义功能"></a>其他自定义功能</h2><ul><li>字符串映射：输入指定字符，可以替换为预先设定的字符串，类似于输入法中的快捷短语功能</li><li>音量控制：<strong>把鼠标指针放在任务栏的时候，滑动滚轮就能调节音量！（谁用谁说好）</strong></li><li>媒体控制：当鼠标指针位于任务栏时<ul><li>空格：暂停音乐</li><li>Ctrl：下一首</li><li>Shift：上一首</li></ul></li><li>快捷编辑环境变量：鼠标指针放在任务栏，按H键(再也不用点一堆东西找了)</li><li>自定义操作：利用“鼠标指针位于任务栏”这个条件，可以把各种操作进行扩展，除了基础的媒体控制，也可以快捷打开软件，而不会占用系统热键，比如：当鼠标指针位于任务栏时，按E键打开资源管理器。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>空格原本不是修饰键，（Ctrl、Shift这些才是），因此需要利用这个脚本把空格键做为修饰键使用，才能配合其他按键使用，具体来说就是当你长按空格键的时候，并不会一致输入空格，而是会等待下一个组合键的按下，如何不按任何键抬起，那么就会输入一个空格。所以，空格的触发时机是抬起的时候而不是在按下的时候，在打游戏的时候一定要先挂起脚本，不然会严重影响操作。</p><p>当然以上所有的功能都可以自定义，不过这套设置大部分地方其实已经非常人性化了，在给舍友分享之后，他迅速上手，并且也成了忠实用户。</p><h1 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h1><h2 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h2><p>在<a href="https://www.autohotkey.com/">AHK官网</a>可以下载安装，<a href="https://wyagd001.github.io/zh-cn/docs/Tutorial.htm">官方文档</a>非常详细地介绍了基础用法和进阶用法。安装后会关联.ahk后缀的文本文件，可以用记事本或者其他编辑器打开。想要新建脚本的时候也要以.ahk为后缀。</p><h2 id="脚本运行"><a href="#脚本运行" class="headerlink" title="脚本运行"></a>脚本运行</h2><p>右键.ahk文件点击run script可以运行脚本，没有界面，只会在托盘中多出一个绿色的H图标。<img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/20211106160835.png" height="200"/><br>可以直接编辑当前使用的脚本，挂起或者暂停脚本，不过我发现暂停好像不太管用，一直用的是挂起。可以同时运行多个脚本，如果不介意托盘图标太多的话。<br>为了能开机自启，可以创建脚本文件的快捷方式，把快捷方式复制到Windows的自启目录中(Win+R打开运行窗口，输入shell:startup)。<img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/20211106162819.png" height="500"/>  </p><p>ahk脚本也能脱离安装环境使用，在安装目录下的Compiler目录中，有Ahk2Exe.exe转换程序，可以把脚本转换成对应的exe程序,这样就能拷贝到其他电脑使用，即使其他电脑没有安装AutoHotKey，exe程序的开机自启设置跟上文相同。<br><img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/20211106163246.png" height="400"/>  </p><h1 id="脚本分享"><a href="#脚本分享" class="headerlink" title="脚本分享"></a>脚本分享</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs text">;当重新运行脚本时，不提示，直接替换原来的脚本<br>#SingleInstance force<br><br>;将掩码键改成未分配的按键,避免额外的Ctrl键或alt键<br>#MenuMaskKey vkE8<br><br>;保持大写键禁用（电脑不会提示大写状态，方便开启大写键的映射）<br>SetCapsLockState, AlwaysOff <br><br>;大写键功能<br>;控制光标<br>CapsLock &amp; j:: MouseMove, -40, 0, 0, R  ; 左移光标<br>CapsLock &amp; k:: MouseMove, 0, 40, 0, R  ; 下移光标<br>CapsLock &amp; l:: MouseMove, 40, 0, 0, R  ; 右移光标<br>CapsLock &amp; i:: MouseMove, 0, -40, 0, R ; 上移光标<br>;控制鼠标点击<br>CapsLock &amp; n::Send &#123;LButton&#125; ;点击鼠标左键<br>CapsLock &amp; m::Send &#123;RButton&#125; ;点击鼠标右键<br>CapsLock &amp; u::Send &#123;WheelUp&#125; ;滚轮上划<br>CapsLock &amp; o::Send &#123;WheelDown&#125; ;滚轮下划<br><br>;方便代码注释<br>CapsLock &amp; q::Send ^&#123;/&#125;<br><br>;字符串映射<br>:*:pwdd::123qwe@@@<br><br>;在某些终端中可以用Alt+c/v 复制粘贴<br>;Alt &amp; c::Send ^&#123;Insert&#125;<br>;Alt &amp; v::Send +&#123;Insert&#125;<br><br><br>; 保持原有空格的功能<br>Space::Send &#123;Space&#125;<br>^Space::Send ^&#123;Space&#125;<br>#Space::Send &#123;LWin down&#125;&#123;Space&#125;<br>;^#Space::Send ^#&#123;Space&#125;<br>!Space::Send !&#123;Space&#125;<br>^!Space::Send ^!&#123;Space&#125;<br><br>;  空格和数字键的组合<br>space &amp; 1::WinMinimize,A   ;最小化当前窗口<br>space &amp; 2::WinMaximize, A  ; 最大化当前窗口<br>space &amp; 3::WinRestore, A ;如果当前窗口最大或最小，重置<br>space &amp; 4::Send !&#123;F4&#125; ;Alt+F4<br>space &amp; 5:: Winset, AlwaysOnTop, Toggle, A ;取消或者设置当前窗口置顶<br><br><br>;复制剪切粘贴撤回<br>space &amp; q:: Send ^a ;全选<br>space &amp; s:: Send ^c ;复制<br>space &amp; d:: Send ^v ;粘贴<br>space &amp; e:: Send ^x ;剪切<br>space &amp; r:: Send ^z ;撤回<br><br>;杂项<br>space &amp; t:: Send ^t ;浏览器新建标签页<br>space &amp; w:: Send ^w ;关闭浏览器标签页<br>space &amp; g:: Send #v<br><br>;光标控制<br>space &amp; i:: Send &#123;up&#125;<br>space &amp; j:: Send &#123;left&#125;<br>space &amp; k:: Send &#123;down&#125;<br>space &amp; l:: Send &#123;right&#125;<br><br>space &amp; n:: Send &#123;home&#125; ;定位到行首<br>space &amp; m:: Send &#123;end&#125; ;定位到行尾<br>space &amp; h:: Send &#123;Backspace&#125; ;退格键<br>space &amp; b:: Send &#123;Del&#125; ;删除键<br><br>;写代码用<br>space &amp; 0::Send +0 ;左括号<br>space &amp; 9::Send +9 ;右括号<br>space &amp; o:: Send &#123;.&#125; ;句号<br>space &amp; u:: Send &#123;,&#125; ;逗号<br>space &amp; a:: Send &#123;=&#125; ;等号<br>space &amp; -:: Send &#123;_&#125; ;下划线<br><br>;  文字编辑用<br>#if GetKeyState(&quot;space&quot;, &quot;P&quot;)<br>f &amp; m::Send &#123;Home&#125;+&#123;End&#125;;空格+F+M 选中一行<br>f &amp; j::Send +&#123;Left&#125; ;实现光标向左选中文字<br>f &amp; l::Send +&#123;Right&#125; ;实现光标向右选中文字<br>f &amp; h::Send ^&#123;Backspace&#125; <br><br>;媒体控制功能<br>;1.自定义函数<br>MouseIsOver(WinTitle) &#123;<br>    MouseGetPos,,, Win<br>    return WinExist(WinTitle . &quot; ahk_id &quot; . Win)<br>&#125;<br>;2.调用函数(当指针在任务栏时：滚轮调整音量；空格暂停音乐；Ctrl下一首；Shift上一首;h打开环境变量)<br>#If MouseIsOver(&quot;ahk_class Shell_TrayWnd&quot;)<br>WheelUp::Send &#123;Volume_Up&#125;<br>WheelDown::Send &#123;Volume_Down&#125;<br>Space::Send &#123;Media_Play_Pause&#125;<br>Ctrl::Send &#123;Media_Next&#125;<br>Shift::Send &#123;Media_Prev&#125;<br>h:: Run SystemPropertiesAdvanced.exe<br><br>return<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>效率提高</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>疫情通自动填报</title>
    <link href="/2021/24360.html"/>
    <url>/2021/24360.html</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ol><li>获取提交数据</li><li>编写python代码</li><li>自动执行</li><li>参考</li></ol><h1 id="1-获取提交数据"><a href="#1-获取提交数据" class="headerlink" title="1.获取提交数据"></a>1.获取提交数据</h1><p>疫情通提交一般在手机操作，其实也是web页面。在PC端打开微信中的填报页面，复制链接到浏览器打开，首次进入需要登录，账号密码每个学校不同，根据提示即可。登录后浏览器会记录cookies，里面代表的就是本人身份。<br>F12打开控制台，这里以FireFox为例，填写完正确信息，点击提交后查看网络请求，可以看到请求头：<br><img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/Snipaste_2021-11-02_09-31-16.png">  </p><p>以及请求体：<br><img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/Snipaste_2021-11-02_09-32-32.png"><br>请求头中包含当前用户的已登录信息，请求体中包含了需要提交的数据，有了这两项就可以编写代码了。</p><h1 id="2-编写python代码"><a href="#2-编写python代码" class="headerlink" title="2.编写python代码"></a>2.编写python代码</h1><p>本来是想用java实现的，但是没有云服务器部署，网上浏览一番发现腾讯云可以支持部署python函数（嗯 真香）。下面的代码模拟浏览器发送填报请求，获取请求结果通过邮件发送到自己的邮箱：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> smtplib<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> email.mime.text <span class="hljs-keyword">import</span> MIMEText<br><br><span class="hljs-comment">#消息发送模块引包</span><br><br><br><span class="hljs-comment"># 腾讯云自动函数命名</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main_handler</span>(<span class="hljs-params">event, context</span>):</span><br>    sendEmail(<span class="hljs-string">&quot;疫情通：&quot;</span> +<br>              <span class="hljs-built_in">eval</span>(requests.post(url=url, data=data,<br>                                 headers=headers).text)[<span class="hljs-string">&#x27;m&#x27;</span>])  <span class="hljs-comment"># 获取疫情通接口调用返回的数据</span><br>    <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;调用成功&quot;</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sendEmail</span>(<span class="hljs-params">message</span>):</span><br>    msg_from = <span class="hljs-string">&#x27;发送方邮箱&#x27;</span>  <span class="hljs-comment"># 发送方邮箱</span><br>    passwd = <span class="hljs-string">&#x27;自定义&#x27;</span>  <span class="hljs-comment"># 发送方邮箱的授权码</span><br>    msg_to = <span class="hljs-string">&#x27;接收方邮箱&#x27;</span>  <span class="hljs-comment"># 收件人邮箱</span><br>    subject = <span class="hljs-string">&quot;疫情通-填报情况&quot;</span>  <span class="hljs-comment"># 主题</span><br>    msg = MIMEText(message)<br>    msg[<span class="hljs-string">&#x27;Subject&#x27;</span>] = subject<br>    msg[<span class="hljs-string">&#x27;From&#x27;</span>] = msg_from<br>    msg[<span class="hljs-string">&#x27;To&#x27;</span>] = msg_to<br>    <span class="hljs-keyword">try</span>:<br>        s = smtplib.SMTP_SSL(<span class="hljs-string">&quot;smtp.qq.com&quot;</span>, <span class="hljs-number">465</span>)  <span class="hljs-comment"># 邮件服务器及端口号</span><br>        s.login(msg_from, passwd)<br>        s.sendmail(msg_from, msg_to, msg.as_string())<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[&#x27;</span> + <span class="hljs-built_in">str</span>(<br>            time.strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime(time.time()))) +<br>              <span class="hljs-string">&quot;]邮件发送成功,邮件内容：&quot;</span> + message)<br>    <span class="hljs-keyword">except</span> s:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[&#x27;</span> + <span class="hljs-built_in">str</span>(<br>            time.strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime(time.time()))) +<br>              <span class="hljs-string">&quot;]邮件发送失败,邮件内容：&quot;</span> + message)<br>    <span class="hljs-keyword">finally</span>:<br>        s.quit()<br><br><br>url = <span class="hljs-string">&quot;https://app.xaut.edu.cn/ncov/wap/default/save&quot;</span><br><span class="hljs-comment"># 请求头</span><br>headers = &#123;<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span>,<br>    <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;application/json, text/javascript, */*; q=0.01&#x27;</span>,<br>    <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&#x27;zh-cn&#x27;</span>,<br>    <span class="hljs-string">&#x27;Accept-Encoding&#x27;</span>: <span class="hljs-string">&#x27;gzip, deflate, br&#x27;</span>,<br>    <span class="hljs-string">&#x27;Host&#x27;</span>: <span class="hljs-string">&#x27;app.xaut.edu.cn&#x27;</span>,<br>    <span class="hljs-string">&#x27;Origin&#x27;</span>: <span class="hljs-string">&#x27;https://app.xaut.edu.cn&#x27;</span>,<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>:<br>    <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/93.0&#x27;</span>,<br>    <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;close&#x27;</span>,<br>    <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;https://app.xaut.edu.cn/ncov/wap/default/index&#x27;</span>,<br>    <span class="hljs-string">&#x27;Content-Length&#x27;</span>: <span class="hljs-string">&#x27;根据浏览器请求头填写&#x27;</span>,<br>    <span class="hljs-comment"># Cookie是身份标识</span><br>    <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27;eai-sess=从cookies中获取;&#x27;</span><br>    <span class="hljs-string">&#x27;UUkey=从cookies中获取&#x27;</span>,<br>    <span class="hljs-string">&#x27;X-Requested-With&#x27;</span>: <span class="hljs-string">&#x27;XMLHttpRequest&#x27;</span>,<br>&#125;<br><span class="hljs-comment"># 请求体</span><br>data = &#123;<br>    <span class="hljs-string">&quot;zgfxdq&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<br>    <span class="hljs-string">&quot;mjry&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<br>    <span class="hljs-string">&quot;csmjry&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<br>    <span class="hljs-string">&quot;tw&quot;</span>:<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-comment"># 体温，选第二项</span><br>    <span class="hljs-string">&quot;sfcxtz&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<br>    <span class="hljs-string">&quot;sfjcbh&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<br>    <span class="hljs-string">&quot;sfcxzysx&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<br>    <span class="hljs-string">&quot;qksm&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;sfyyjc&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<br>    <span class="hljs-string">&quot;jcjgqr&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<br>    <span class="hljs-string">&quot;remark&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;陕西省西安市碑林区东关南街街道西安理工大学金花校区教学楼&quot;</span>,<br>    <span class="hljs-string">&quot;geo_api_info&quot;</span>:<br>    <span class="hljs-string">&quot;&#123;\&quot;type\&quot;:\&quot;complete\&quot;,\&quot;info\&quot;:\&quot;SUCCESS\&quot;,\&quot;status\&quot;:1,\&quot;dEa\&quot;:\&quot;jsonp_25306_\&quot;,\&quot;position\&quot;:&#123;\&quot;Q\&quot;:34.25316,\&quot;R\&quot;:108.99460999999997,\&quot;lng\&quot;:108.99461,\&quot;lat\&quot;:34.25316&#125;,\&quot;message\&quot;:\&quot;Get+ipLocation+success.Get+address+success.\&quot;,\&quot;location_type\&quot;:\&quot;ip\&quot;,\&quot;accuracy\&quot;:null,\&quot;isConverted\&quot;:true,\&quot;addressComponent\&quot;:&#123;\&quot;citycode\&quot;:\&quot;029\&quot;,\&quot;adcode\&quot;:\&quot;610103\&quot;,\&quot;businessAreas\&quot;:[],\&quot;neighborhoodType\&quot;:\&quot;\&quot;,\&quot;neighborhood\&quot;:\&quot;\&quot;,\&quot;building\&quot;:\&quot;\&quot;,\&quot;buildingType\&quot;:\&quot;\&quot;,\&quot;street\&quot;:\&quot;金花南路\&quot;,\&quot;streetNumber\&quot;:\&quot;5号\&quot;,\&quot;country\&quot;:\&quot;中国\&quot;,\&quot;province\&quot;:\&quot;陕西省\&quot;,\&quot;city\&quot;:\&quot;西安市\&quot;,\&quot;district\&quot;:\&quot;碑林区\&quot;,\&quot;township\&quot;:\&quot;东关南街街道\&quot;&#125;,\&quot;formattedAddress\&quot;:\&quot;陕西省西安市碑林区东关南街街道西安理工大学金花校区教学楼\&quot;,\&quot;roads\&quot;:[],\&quot;crosses\&quot;:[],\&quot;pois\&quot;:[]&#125;&quot;</span>,<br>    <span class="hljs-string">&quot;area&quot;</span>:<span class="hljs-string">&quot;陕西省+西安市+碑林区&quot;</span>,<br>    <span class="hljs-string">&quot;province&quot;</span>:<span class="hljs-string">&quot;陕西省&quot;</span>,<br>    <span class="hljs-string">&quot;city&quot;</span>:<span class="hljs-string">&quot;西安市&quot;</span>,<br>    <span class="hljs-string">&quot;sfzx&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-comment">#是否在校</span><br>    <span class="hljs-string">&quot;sfjcwhry&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<br>    <span class="hljs-string">&quot;sfjchbry&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<br>    <span class="hljs-string">&quot;sfcyglq&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-comment">#是否处于隔离期</span><br>    <span class="hljs-string">&quot;gllx&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;glksrq&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;jcbhlx&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;jcbhrq&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;bztcyy&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<br>    <span class="hljs-string">&quot;sftjhb&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<br>    <span class="hljs-string">&quot;sftjwh&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<br>    <span class="hljs-string">&quot;jcjg&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;date&quot;</span>:<span class="hljs-built_in">str</span>(datetime.date.today() - datetime.timedelta(days=<span class="hljs-number">1</span>)).replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>),<br>    <span class="hljs-string">&quot;uid&quot;</span>:<span class="hljs-string">&quot;根据自己的写&quot;</span>,<br>    <span class="hljs-string">&quot;created&quot;</span>:<span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(time.time())),<br>    <span class="hljs-string">&quot;jcqzrq&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;sfjcqz&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;szsqsfybl&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<br>    <span class="hljs-string">&quot;sfsqhzjkk&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<br>    <span class="hljs-string">&quot;sqhzjkkys&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;sfygtjzzfj&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<br>    <span class="hljs-string">&quot;gtjzzfjsj&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;fxyy&quot;</span>:<span class="hljs-string">&quot;上课&quot;</span>, <span class="hljs-comment">#返校原因</span><br>    <span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;根据自己的写&quot;</span>,<br>    <span class="hljs-string">&quot;gwszdd&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;sfyqjzgc&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;jrsfqzys&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;jrsfqzfy&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;ismoved&quot;</span>:<span class="hljs-string">&quot;0&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>所有需要根据个人信息填写的地方，都需要根据浏览器中捕获的请求来填写。</strong></p><h1 id="3-自动执行"><a href="#3-自动执行" class="headerlink" title="3.自动执行"></a>3.自动执行</h1><p>在腾讯云的云函数服务中部署该代码即可每日自动执行。<br>注册腾讯云，进入搜索云函数，新建函数服务：<br><img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/Snipaste_2021-11-02_15-57-18.png"></p><p>把python代码粘贴到此：<br><img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/Snipaste_2021-11-02_15-59-06.png"></p><p>在高级配置中设置超时时间，配置触发器，每天7点执行：<br><img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/Snipaste_2021-11-02_16-07-55.png"></p><p>第二天7点：<br><img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/1635840730256.jpg"><br>🐂</p><h1 id="4-参考"><a href="#4-参考" class="headerlink" title="4.参考"></a>4.参考</h1><blockquote><ul><li><a href="https://blog.csdn.net/qq_41725313/article/details/117675485">python疫情通自动填报</a></li><li><a href="https://zhuanlan.zhihu.com/p/388579062">腾讯云自动签到</a></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>天气预报-中国天气网爬虫</title>
    <link href="/2021/57635.html"/>
    <url>/2021/57635.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>项目需要获取7日天气预报，免费好用的接口寻觅不到，搜索一番后发现用简单的爬虫可以实现，在完成python版本后，想着能否用java来实现，一番学习后完成了需求，结果如下<br><img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/fa89bb7a45b6482fb3835fd79cf16386.png" alt="运行结果"></p><h1 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h1><p>在Maven项目中添加相应依赖，这里使用httpclient+jsoup的组合来完成<br>httpclient用来发送请求，而jsoup用来解析请求结果<br>两者的详细介绍参考文末引文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;<br>    &lt;artifactId&gt;httpclient&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">4.5</span><span class="hljs-number">.13</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.jsoup&lt;/groupId&gt;<br>    &lt;artifactId&gt;jsoup&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">1.13</span><span class="hljs-number">.1</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h1 id="爬取数据"><a href="#爬取数据" class="headerlink" title="爬取数据"></a>爬取数据</h1><p>首先看到中国天气网的界面如下（随着时间段的不同，界面可能显示不同）<br><img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/67bca1f8f1464cdf9212699089471944.png">打开控制台看到目标url，url最后的数字标识地区代码，这是我们爬虫的入口，请求头中的User-Agent属性标识自己使用的浏览器。</p><p>新建HtmlUtil类用来发送请求，爬取数据需要先从此类获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ljp.springandpython.utils;<br><br><span class="hljs-keyword">import</span> org.apache.http.client.config.RequestConfig;<br><span class="hljs-keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;<br><span class="hljs-keyword">import</span> org.apache.http.client.methods.HttpGet;<br><span class="hljs-keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;<br><span class="hljs-keyword">import</span> org.apache.http.impl.client.HttpClientBuilder;<br><span class="hljs-keyword">import</span> org.apache.http.util.EntityUtils;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HtmlUtil</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getResult</span><span class="hljs-params">(String url)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> HttpClientBuilder.create().build();<br>             <span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> httpClient.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpGetConfig</span>(url))) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> EntityUtils.toString(response.getEntity(),<span class="hljs-string">&quot;utf-8&quot;</span>); <span class="hljs-comment">//设置编码，防止乱码</span><br>            <span class="hljs-keyword">return</span> result;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpGetConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpGet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HttpGetConfig</span><span class="hljs-params">(String url)</span> &#123;<br>        <span class="hljs-built_in">super</span>(url);<br>        setDefaultConfig();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDefaultConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.setConfig(RequestConfig.custom()<br>                .setConnectionRequestTimeout(<span class="hljs-number">1000</span> * <span class="hljs-number">10</span>)<br>                .setConnectTimeout(<span class="hljs-number">1000</span> * <span class="hljs-number">10</span>)<br>                .setSocketTimeout(<span class="hljs-number">1000</span> * <span class="hljs-number">10</span>)<br>                .build());<br>        <span class="hljs-built_in">this</span>.setHeader(<span class="hljs-string">&quot;User-Agent&quot;</span>, <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:92.0) Gecko/20100101 Firefox/92.0&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="获取日期和星期"><a href="#获取日期和星期" class="headerlink" title="获取日期和星期"></a>获取日期和星期</h2><p><img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/0cad8486508745b8aeee1432a1a37c00.png" alt="日期">在界面中审查元素，找到“4日（今天）”元素，发现为&lt; h1 &gt;标签，另外可以发现在此页面中，h1标签在这里首次出现，那么我们可以获取全部的h1标签，最后只取前7个，提取出日期<br>jsoup中的select方法可以方便的提取页面中的元素，更多用法参照 <a href="https://blog.csdn.net/championhengyi/article/details/68491306">jsoup中select的用法</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">String result=HtmlUtil.getResult(<span class="hljs-string">&quot;http://www.weather.com.cn/weather/101110200.shtml&quot;</span>);<br>Document document= Jsoup.parse(result);<br>Elements elements;<br><br><span class="hljs-comment">// 获取日期和星期</span><br>elements=document.select(<span class="hljs-string">&quot;h1&quot;</span>);<br>List&lt;String&gt; dateList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>List&lt;String&gt; dayList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++) &#123;<br>    String text=elements.get(i).text();<br>    <span class="hljs-type">int</span> length=text.length();<br>    dateList.add(text.substring(<span class="hljs-number">0</span>,length-<span class="hljs-number">4</span>));<br>    dayList.add(text.substring(length-<span class="hljs-number">3</span>,length-<span class="hljs-number">1</span>));<br>&#125;<br>System.out.println(dateList);<br>System.out.println(dayList);<br></code></pre></td></tr></table></figure><h2 id="获取天气描述"><a href="#获取天气描述" class="headerlink" title="获取天气描述"></a>获取天气描述</h2><p>获取天气较为简单，发现天气位于p标签内，class属性为“wea”，接上文代码<br><img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/a4afd500c5284adbaa6d76d79692943c.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取天气</span><br>elements=document.select(<span class="hljs-string">&quot;p[class=wea]&quot;</span>);<br>List&lt;String&gt; weatherList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (Element item : elements) &#123;<br>    weatherList.add(item.text());<br>&#125;<br>System.out.println(weatherList);<br></code></pre></td></tr></table></figure><h2 id="获取温度范围"><a href="#获取温度范围" class="headerlink" title="获取温度范围"></a>获取温度范围</h2><p>温度范围类似，不再赘述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取温度，最高温和最低温</span><br>elements=document.select(<span class="hljs-string">&quot;p[class=tem]&quot;</span>);<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>List&lt;String&gt; highTempList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>List&lt;String&gt; lowTempList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (Element item : elements) &#123;<br>    highTempList.add(item.select(<span class="hljs-string">&quot;span&quot;</span>).text()+<span class="hljs-string">&quot;℃&quot;</span>);<br>    lowTempList.add(item.select(<span class="hljs-string">&quot;i&quot;</span>).text());<br>&#125;<br>System.out.println(highTempList);<br>System.out.println(lowTempList);<br></code></pre></td></tr></table></figure><h2 id="获取风向及风力"><a href="#获取风向及风力" class="headerlink" title="获取风向及风力"></a>获取风向及风力</h2><p>风向和风力有多个子标签嵌套，仔细分析结构<br><img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/4df1eccf61ff4e3c85302bb6621d43d5.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取风向及风力</span><br>elements=document.select(<span class="hljs-string">&quot;p[class=win]&quot;</span>);<br>List&lt;String&gt; windDirectionList1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>List&lt;String&gt; windDirectionList2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>List&lt;String&gt; windSpeedList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (Element item : elements) &#123;<br>    Element em=item.child(<span class="hljs-number">0</span>); <span class="hljs-comment">//获取em标签，em标签中包含了两个span标签，是需要的风向</span><br>    windDirectionList1.add(em.select(<span class="hljs-string">&quot;span&quot;</span>).get(<span class="hljs-number">0</span>).attr(<span class="hljs-string">&quot;title&quot;</span>)); <span class="hljs-comment">//attr函数用来获取标签内的属性值</span><br>    windDirectionList2.add(em.select(<span class="hljs-string">&quot;span&quot;</span>).get(<span class="hljs-number">1</span>).attr(<span class="hljs-string">&quot;title&quot;</span>));<br>    windSpeedList.add(item.select(<span class="hljs-string">&quot;i&quot;</span>).text());<br>&#125;<br>System.out.println(windDirectionList1);<br>System.out.println(windDirectionList2);<br>System.out.println(windSpeedList);<br></code></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ljp.springandpython.utils;<br><br><span class="hljs-keyword">import</span> org.jsoup.Jsoup;<br><span class="hljs-keyword">import</span> org.jsoup.nodes.Document;<br><span class="hljs-keyword">import</span> org.jsoup.nodes.Element;<br><span class="hljs-keyword">import</span> org.jsoup.select.Elements;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HtmlUtilTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        String result=HtmlUtil.getResult(<span class="hljs-string">&quot;http://www.weather.com.cn/weather/101110200.shtml&quot;</span>);<br>        Document document= Jsoup.parse(result);<br>        Elements elements;<br><br>        <span class="hljs-comment">// 获取日期和星期</span><br>        elements=document.select(<span class="hljs-string">&quot;h1&quot;</span>);<br>        List&lt;String&gt; dateList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        List&lt;String&gt; dayList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++) &#123;<br>            String text=elements.get(i).text();<br>            <span class="hljs-type">int</span> length=text.length();<br>            dateList.add(text.substring(<span class="hljs-number">0</span>,length-<span class="hljs-number">4</span>));<br>            dayList.add(text.substring(length-<span class="hljs-number">3</span>,length-<span class="hljs-number">1</span>));<br>        &#125;<br>        System.out.println(dateList);<br>        System.out.println(dayList);<br><br>        <span class="hljs-comment">// 获取天气</span><br>        elements=document.select(<span class="hljs-string">&quot;p[class=wea]&quot;</span>);<br>        List&lt;String&gt; weatherList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Element item : elements) &#123;<br>            weatherList.add(item.text());<br>        &#125;<br>        System.out.println(weatherList);<br><br>        <span class="hljs-comment">// 获取温度，最高温和最低温</span><br>        elements=document.select(<span class="hljs-string">&quot;p[class=tem]&quot;</span>);<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>        List&lt;String&gt; highTempList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        List&lt;String&gt; lowTempList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Element item : elements) &#123;<br>            highTempList.add(item.select(<span class="hljs-string">&quot;span&quot;</span>).text()+<span class="hljs-string">&quot;℃&quot;</span>);<br>            lowTempList.add(item.select(<span class="hljs-string">&quot;i&quot;</span>).text());<br>        &#125;<br>        System.out.println(highTempList);<br>        System.out.println(lowTempList);<br><br>        <span class="hljs-comment">// 获取风向及风力</span><br>        elements=document.select(<span class="hljs-string">&quot;p[class=win]&quot;</span>);<br>        List&lt;String&gt; windDirectionList1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        List&lt;String&gt; windDirectionList2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        List&lt;String&gt; windSpeedList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Element item : elements) &#123;<br>            Element em=item.child(<span class="hljs-number">0</span>); <span class="hljs-comment">//获取em标签，em标签中包含了两个span标签，是需要的风向</span><br>            windDirectionList1.add(em.select(<span class="hljs-string">&quot;span&quot;</span>).get(<span class="hljs-number">0</span>).attr(<span class="hljs-string">&quot;title&quot;</span>)); <span class="hljs-comment">//attr函数用来获取标签内的属性值</span><br>            windDirectionList2.add(em.select(<span class="hljs-string">&quot;span&quot;</span>).get(<span class="hljs-number">1</span>).attr(<span class="hljs-string">&quot;title&quot;</span>));<br>            windSpeedList.add(item.select(<span class="hljs-string">&quot;i&quot;</span>).text());<br>        &#125;<br>        System.out.println(windDirectionList1);<br>        System.out.println(windDirectionList2);<br>        System.out.println(windSpeedList);<br><br>        <span class="hljs-comment">// 封装结果，每天一行</span><br>        List&lt;Map&lt;String,String&gt;&gt; list=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">7</span>; j++) &#123;<br>            Map&lt;String,String&gt; map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br>            map.put(<span class="hljs-string">&quot;date&quot;</span>,dateList.get(j));<br>            map.put(<span class="hljs-string">&quot;day&quot;</span>,dayList.get(j));<br>            map.put(<span class="hljs-string">&quot;weather&quot;</span>,weatherList.get(j));<br>            map.put(<span class="hljs-string">&quot;highTemp&quot;</span>,highTempList.get(j));<br>            map.put(<span class="hljs-string">&quot;lowTemp&quot;</span>,lowTempList.get(j));<br>            map.put(<span class="hljs-string">&quot;windDirection1&quot;</span>,windDirectionList1.get(j));<br>            map.put(<span class="hljs-string">&quot;windDirection2&quot;</span>,windDirectionList2.get(j));<br>            map.put(<span class="hljs-string">&quot;windSpeed&quot;</span>,windSpeedList.get(j));<br>            list.add(map);<br>        &#125;<br><br>        list.forEach(System.out::println);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：<br><img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/6050b0cfe21e4faeb8346d69daadc4a5.png"></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote><ul><li><a href="https://www.cnblogs.com/hello-daocaoren/p/6880166.html">使用HttpClient和Jsoup实现一个简单爬虫</a></li><li><a href="https://blog.csdn.net/River_sum/article/details/82533648">Java爬虫-快速入门 HttpClient+JSoup详解</a></li><li><a href="https://blog.csdn.net/championhengyi/article/details/68491306">使用Jsoup的select语法进行元素查找</a></li><li><a href="https://blog.csdn.net/qq_40705355/article/details/83856960">Python爬虫入门实战——–一周天气预报爬取</a></li><li><a href="https://blog.csdn.net/s_alted/article/details/118313047">Python爬虫实战(3) | 爬取一周的天气预报信息</a></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue实现热力图动态缩放</title>
    <link href="/2021/59794.html"/>
    <url>/2021/59794.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>项目需要，根据积水数据的多少，在页面中进行展示，选用高德热力图api。实现后发现地图的缩放会导致热力图自动更改渲染的颜色，导致预期的效果发生变化，研究文档后实现了动态调整热力图的渲染，保证在不同缩放等级的地图下都能展示预期效果</p><p>使用vue ui命令构建项目，vue版本为2.x，使用axios读取本地积水数据，<br>axios安装命令为<code>vue add axios</code><br>完整代码先看最后</p><h1 id="1-引入高德js"><a href="#1-引入高德js" class="headerlink" title="1.引入高德js"></a>1.引入高德js</h1><p>在public目录下的index.html页面中引用脚本和css样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://webapi.amap.com/maps?v=1.4.15&amp;key=你申请的key值&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://a.amap.com/jsapi_demos/static/demo-center/css/demo-center.css&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h1 id="2-显示基本的热力图"><a href="#2-显示基本的热力图" class="headerlink" title="2.显示基本的热力图"></a>2.显示基本的热力图</h1><p> 显示底图：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">loadMap</span>(<span class="hljs-params"></span>) &#123;<br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">map</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMap</span>.<span class="hljs-title class_">Map</span>(<span class="hljs-string">&quot;container&quot;</span>, &#123;<br>   <span class="hljs-attr">resizeEnable</span>: <span class="hljs-literal">true</span>,<br>   <span class="hljs-attr">center</span>: [<span class="hljs-number">108.909759</span>, <span class="hljs-number">34.412745</span>],<br>   <span class="hljs-attr">zoom</span>: <span class="hljs-number">12</span>,<br> &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里有个小地方需要注意，如果不指定宽高，那么地图无法显示<br>我的做法是先指定父级节点的宽高，再指定本页面的宽高<br>父级节点在App.vue中<br><img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/7ea0b1ea62b349d189e73d32c648f6ff.png"></p><p>添加热力图：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">createHeatMap2</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">let</span> _this = <span class="hljs-variable language_">this</span>; <span class="hljs-comment">//保存vue实例,保证this作用域一致</span><br><span class="hljs-keyword">let</span> api = <span class="hljs-string">&quot;/js/result_half.json&quot;</span>;<br>axios.<span class="hljs-title function_">get</span>(api).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> data = res.<span class="hljs-property">data</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(tempdata);<br><br>  _this.<span class="hljs-property">map</span>.<span class="hljs-title function_">plugin</span>([<span class="hljs-string">&quot;AMap.Heatmap&quot;</span>], <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//初始化heatmap对象</span><br>    _this.<span class="hljs-property">heatmap</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMap</span>.<span class="hljs-title class_">Heatmap</span>(_this.<span class="hljs-property">map</span>, &#123;<br>      <span class="hljs-attr">radius</span>: <span class="hljs-number">0.9</span>, <span class="hljs-comment">//每个热力点的大小</span><br>      <span class="hljs-attr">opacity</span>: [<span class="hljs-number">0.2</span>, <span class="hljs-number">0.8</span>], <span class="hljs-comment">//最小透明度和最大透明度，最小透明度越小，数值小的点就越不明显；最大透明度越大，数值大的点就越明显</span><br>      <span class="hljs-attr">blur</span>: <span class="hljs-number">0.5</span>, <span class="hljs-comment">//一个点外圈和内圈的大小比例，值越大，内圈占的比例就越大；值越小，外圈占的比例就越大</span><br>      <span class="hljs-attr">gradient</span>: &#123;<br>        <span class="hljs-comment">//同 min参数以及 max参数一起生效，比如积水数值在[0.02,0.4]之间时，</span><br>        <span class="hljs-comment">//gradient定义了某一个积水数值在这个区间的不同位置时显示什么颜色，如果计算出来不相等，就取两者之间的颜色</span><br>        <span class="hljs-number">0.25</span>: _this.<span class="hljs-property">level1</span>,<br>        <span class="hljs-number">0.5</span>: _this.<span class="hljs-property">level2</span>,<br>        <span class="hljs-number">0.75</span>: _this.<span class="hljs-property">level3</span>,<br>        <span class="hljs-number">0.8</span>: _this.<span class="hljs-property">level4</span>,<br>        <span class="hljs-number">1</span>: _this.<span class="hljs-property">level5</span>,<br>      &#125;,<br>    &#125;);<br>    <span class="hljs-comment">//设置数据集</span><br>    _this.<span class="hljs-property">heatmap</span>.<span class="hljs-title function_">setDataSet</span>(&#123;<br>      <span class="hljs-attr">data</span>: data,<br>      <span class="hljs-attr">max</span>: <span class="hljs-number">0.5</span>,<br>      <span class="hljs-attr">min</span>: <span class="hljs-number">0.1</span>,<br>    &#125;);<br>  &#125;);<br>&#125;);<br>&#125;,<br></code></pre></td></tr></table></figure><p>其中，result_half.json文件存在于本地，为了符合高德api，格式需要如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[<br>&#123;<br><span class="hljs-string">&quot;lng&quot;</span>:xxx,<br><span class="hljs-string">&quot;lat&quot;</span>:xxx,<br><span class="hljs-string">&quot;count&quot;</span>:xxx<br>&#125;,<br>&#123;<br><span class="hljs-string">&quot;lng&quot;</span>:xxx,<br><span class="hljs-string">&quot;lat&quot;</span>:xxx,<br><span class="hljs-string">&quot;count&quot;</span>:xxx<br>&#125;,<br>]<br></code></pre></td></tr></table></figure><p>效果：<br><img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/c6b16533ca41478aa7eb054906aec5fc.png"><br>此处存在问题，上图的地图缩放等级为12，当放大后原本应该为红色区域（积水数值较大）的地方效果会淡化，如下：<br><img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/1a6d32b2e4b24b3d8d91786dcc6dc206.png"><br>这里是由于heatmap.js本身的计算导致，因此需要一个方法来解决</p><h1 id="3-显示优化"><a href="#3-显示优化" class="headerlink" title="3.显示优化"></a>3.显示优化</h1><p>热力图的radius属性可以指定热力点的半径大小，根据高德api文档，只需要绑定一个地图缩放事件，当地图放大缩小时，调整热力点的大小，保证显示效果的一致</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">addHeatMapEvent</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> _this=<span class="hljs-variable language_">this</span>;<br>  _this.<span class="hljs-property">map</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;zoomchange&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">let</span> newRadius;<br>    <span class="hljs-keyword">let</span> zoomLevel = _this.<span class="hljs-property">map</span>.<span class="hljs-title function_">getZoom</span>();<br>    <span class="hljs-keyword">if</span> (zoomLevel &lt;= <span class="hljs-number">12</span>) &#123;<br>      newRadius = <span class="hljs-number">0.9</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (zoomLevel == <span class="hljs-number">13</span>) &#123;<br>      newRadius = <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (zoomLevel == <span class="hljs-number">14</span>) &#123;<br>      newRadius = <span class="hljs-number">2</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (zoomLevel == <span class="hljs-number">15</span>) &#123;<br>      newRadius = <span class="hljs-number">3.5</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (zoomLevel == <span class="hljs-number">16</span>) &#123;<br>      newRadius = <span class="hljs-number">7</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      newRadius = <span class="hljs-number">15</span>;<br>    &#125;<br>    _this.<span class="hljs-property">heatmap</span>.<span class="hljs-title function_">setOptions</span>(&#123;<br>      <span class="hljs-attr">radius</span>: newRadius,<br>    &#125;);<br>  &#125;);<br>&#125;,<br></code></pre></td></tr></table></figure><p>由于高德的地图缩放等级并不多，这里一般用到的是12-17级，所以可以直接写死，热力点具体的半径大小需要根据显示效果慢慢调整，地图放得越大，半径就调整得越大。加入该方法后，显示效果如下：<br><img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/bbba8e5d378a40c48000fbffd4445c31.png"><br><img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/cf9f00e9915e4409ba19cd3b16ac6fcf.png"><br><img src="https://ljp-blog.oss-cn-beijing.aliyuncs.com/8d33a1c669c14fdba0fcf6a777cbef1a.png"><br>问题解决</p><h1 id="4-Vue页面完整代码"><a href="#4-Vue页面完整代码" class="headerlink" title="4.Vue页面完整代码"></a>4.Vue页面完整代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">loadMap</span>();</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">createHeatMap2</span>();</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addHeatMapEvent</span>();</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">map</span>: <span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">heatmap</span>: <span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">level1</span>: <span class="hljs-string">&quot;#BFEFFF&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">level2</span>: <span class="hljs-string">&quot;#00BFFF&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">level3</span>: <span class="hljs-string">&quot;yellow&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">level4</span>: <span class="hljs-string">&quot;#FFA500&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">level5</span>: <span class="hljs-string">&quot;red&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//加载地图</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">loadMap</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">map</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMap</span>.<span class="hljs-title class_">Map</span>(<span class="hljs-string">&quot;container&quot;</span>, &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">resizeEnable</span>: <span class="hljs-literal">true</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">center</span>: [<span class="hljs-number">108.909759</span>, <span class="hljs-number">34.412745</span>],</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">zoom</span>: <span class="hljs-number">12</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//添加热力图</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">createHeatMap2</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">let</span> _this = <span class="hljs-variable language_">this</span>; <span class="hljs-comment">//保存vue实例,保证this作用域一致</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">let</span> api = <span class="hljs-string">&quot;/js/result_half.json&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      axios.<span class="hljs-title function_">get</span>(api).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> data = res.<span class="hljs-property">data</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// console.log(tempdata);</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        _this.<span class="hljs-property">map</span>.<span class="hljs-title function_">plugin</span>([<span class="hljs-string">&quot;AMap.Heatmap&quot;</span>], <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">//初始化heatmap对象</span></span></span><br><span class="language-javascript"><span class="language-xml">          _this.<span class="hljs-property">heatmap</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMap</span>.<span class="hljs-title class_">Heatmap</span>(_this.<span class="hljs-property">map</span>, &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">radius</span>: <span class="hljs-number">0.9</span>, <span class="hljs-comment">//每个热力点的大小</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">opacity</span>: [<span class="hljs-number">0.2</span>, <span class="hljs-number">0.8</span>], <span class="hljs-comment">//最小透明度和最大透明度，最小透明度越小，数值小的点就越不明显；最大透明度越大，数值大的点就越明显</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">blur</span>: <span class="hljs-number">0.5</span>, <span class="hljs-comment">//一个点外圈和内圈的大小比例，值越大，内圈占的比例就越大；值越小，外圈占的比例就越大</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">gradient</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-comment">//同 min参数以及 max参数一起生效，比如积水数值在[0.02,0.4]之间时，</span></span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-comment">//gradient定义了某一个积水数值在这个区间的不同位置时显示什么颜色，如果计算出来不相等，就取两者之间的颜色</span></span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-number">0.25</span>: _this.<span class="hljs-property">level1</span>,</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-number">0.5</span>: _this.<span class="hljs-property">level2</span>,</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-number">0.75</span>: _this.<span class="hljs-property">level3</span>,</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-number">0.8</span>: _this.<span class="hljs-property">level4</span>,</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-number">1</span>: _this.<span class="hljs-property">level5</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">          &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">//设置数据集</span></span></span><br><span class="language-javascript"><span class="language-xml">          _this.<span class="hljs-property">heatmap</span>.<span class="hljs-title function_">setDataSet</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">data</span>: data,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">max</span>: <span class="hljs-number">0.5</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">min</span>: <span class="hljs-number">0.1</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//根据缩放等级调整热力点大小</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">addHeatMapEvent</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">let</span> _this=<span class="hljs-variable language_">this</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      _this.<span class="hljs-property">map</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;zoomchange&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// var oldRadius = heatmap.getOptions()[&#x27;radius&#x27;];</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> newRadius;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> zoomLevel = _this.<span class="hljs-property">map</span>.<span class="hljs-title function_">getZoom</span>();</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">if</span> (zoomLevel &lt;= <span class="hljs-number">12</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          newRadius = <span class="hljs-number">0.9</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (zoomLevel == <span class="hljs-number">13</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          newRadius = <span class="hljs-number">1</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (zoomLevel == <span class="hljs-number">14</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          newRadius = <span class="hljs-number">2</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (zoomLevel == <span class="hljs-number">15</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          newRadius = <span class="hljs-number">3.5</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (zoomLevel == <span class="hljs-number">16</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          newRadius = <span class="hljs-number">7</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125; <span class="hljs-keyword">else</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          newRadius = <span class="hljs-number">15</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        _this.<span class="hljs-property">heatmap</span>.<span class="hljs-title function_">setOptions</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">radius</span>: newRadius,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">html</span>,</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">body</span>,</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-id">#container</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>参考：</p><ul><li><a href="https://lbs.amap.com/demo/javascript-api/example/selflayer/heatmap">高德热力图示例</a></li><li><a href="https://lbs.amap.com/api/javascript-api/reference/layer#m_AMap.Heatmap">高德热力图插件文档</a></li><li><a href="https://blog.csdn.net/FonTomas/article/details/107181802">vue使用高德热力图</a></li><li><a href="https://lbs.amap.com/api/javascript-api/reference/map">高德api map类</a></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>高德api</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
